{
  "contexts": {
    "contexts": [
      {
        "context_type": "resource",
        "indexed": true,
        "corresponding_vector_id": "dde65f1789f44ed0a54453f48dedb3f6",
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "_id": {
          "$oid": "68639bab01ecb20c9725daf1"
        },
        "children_context_nodes": [
          {
            "$oid": "68639bac01ecb20c9725daf2"
          }
        ],
        "blob": null,
        "override_policy": false,
        "parent_context_nodes": [
          {
            "$oid": "68639bab01ecb20c9725daf0"
          }
        ],
        "organization_id": null,
        "governing_policies": "inherit",
        "createdAt": {
          "$date": "2025-07-01T08:26:19.571Z"
        },
        "content": "NetworkManager / conf. d / wifi _ backend. conf [ device ] wifi. backend = iwd Alternatively, you can install networkmanager - iwdAUR, a modified package configured to build NetworkManager working exclusively with iwd, with the main difference being that iwd is required and wpa _ supplicant can be uninstalled after building. Note : You may need to convert existing NetworkManager network profiles after switching to iwd. Running in a network namespace If you would like to run Network",
        "telemetry_data": {},
        "updatedAt": {
          "$date": "2025-07-01T08:26:19.571Z"
        },
        "text": "NetworkManager / conf. d / wifi _ backend. conf [ device ] wifi. backend = iwd Alternatively, you can install networkmanager - iwdAUR, a modified package configured to build NetworkManager working exclusively with iwd, with the main difference being that iwd is required and wpa _ supplicant can be uninstalled after building. Note : You may need to convert existing NetworkManager network profiles after switching to iwd. Running in a network namespace If you would like to run Network",
        "score": 0.9992077946662903
      },
      {
        "context_type": "resource",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "content": ". a company's LAN, Wi - Fi at home, various other Wi - Fi now and then ) you might want to set the NTP server ( s ) used by timesyncd to those provided by DHCP. However, NetworkManager itself is not capable to communicate with systemd - timesyncd to set the NTP server ( s ). The dispatcher can work around it. Create the overlay directory for your systemd - timesyncd configuration / etc / systemd / timesyncd. conf. d if it does not already exist",
        "indexable": true,
        "corresponding_vector_id": "a6f7d0f04bc748e8a5667e9d5c19a89e",
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "children_context_nodes": [
          {
            "$oid": "68639b9c01ecb20c9725dabf"
          }
        ],
        "createdAt": {
          "$date": "2025-07-01T08:26:04.067Z"
        },
        "override_policy": false,
        "organization_id": null,
        "parent_context_nodes": [
          {
            "$oid": "68639b9b01ecb20c9725dabd"
          }
        ],
        "governing_policies": "inherit",
        "_id": {
          "$oid": "68639b9c01ecb20c9725dabe"
        },
        "updatedAt": {
          "$date": "2025-07-01T08:26:04.067Z"
        },
        "telemetry_data": {},
        "text": ". a company's LAN, Wi - Fi at home, various other Wi - Fi now and then ) you might want to set the NTP server ( s ) used by timesyncd to those provided by DHCP. However, NetworkManager itself is not capable to communicate with systemd - timesyncd to set the NTP server ( s ). The dispatcher can work around it. Create the overlay directory for your systemd - timesyncd configuration / etc / systemd / timesyncd. conf. d if it does not already exist",
        "score": 0.9988247752189636
      },
      {
        "context_type": "resource",
        "children_context_nodes": [
          {
            "$oid": "68639bab01ecb20c9725daf0"
          }
        ],
        "indexed": true,
        "parent_context_nodes": [
          {
            "$oid": "68639baa01ecb20c9725daee"
          }
        ],
        "_id": {
          "$oid": "68639bab01ecb20c9725daef"
        },
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "createdAt": {
          "$date": "2025-07-01T08:26:18.967Z"
        },
        "indexable": true,
        "corresponding_vector_id": "2237942aa7a041c3a5f8c3c3be3bfa3c",
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:26:18.967Z"
        },
        "blob": null,
        "content": "Then NetworkManager will remember not to generate a connection for this interface again. You can also edit the connection ( and persist it to disk ) or delete it. NetworkManager will not re - generate a new connection. Then you can change the name to whatever you want. You can use something like nm - connection - editor for this task. Using iwd as the Wi - Fi backend Note : Do not enable iwd. service or manually configure iwd. NetworkManager will start and manage it itself. Consider existing issues before switching to iwd.",
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "telemetry_data": {},
        "text": "Then NetworkManager will remember not to generate a connection for this interface again. You can also edit the connection ( and persist it to disk ) or delete it. NetworkManager will not re - generate a new connection. Then you can change the name to whatever you want. You can use something like nm - connection - editor for this task. Using iwd as the Wi - Fi backend Note : Do not enable iwd. service or manually configure iwd. NetworkManager will start and manage it itself. Consider existing issues before switching to iwd.",
        "score": 0.9982197880744934
      },
      {
        "context_type": "resource",
        "content": "##Manager / dispatcher. d / vpn - up #! / bin / sh VPN _ NAME = \" name of VPN connection defined in NetworkManager \" ESSID = \" Wi - Fi network ESSID ( not connection name ) \" interface = $ 1 status = $ 2 case $ status in up | vpn - down ) if iwgetid | grep - qs \" : \\ \" $ ESSID \\ \" \" ; then nmcli connection up id \" $ VPN _ NAME \" passwd - file / path / to /",
        "children_context_nodes": [
          {
            "$oid": "68639b9901ecb20c9725dab5"
          }
        ],
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "_id": {
          "$oid": "68639b9901ecb20c9725dab4"
        },
        "corresponding_vector_id": "523a683ac2b14e3f93d1dee6a116ec21",
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "createdAt": {
          "$date": "2025-07-01T08:26:01.028Z"
        },
        "telemetry_data": {},
        "parent_context_nodes": [
          {
            "$oid": "68639b9801ecb20c9725dab3"
          }
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:26:01.028Z"
        },
        "text": "##Manager / dispatcher. d / vpn - up #! / bin / sh VPN _ NAME = \" name of VPN connection defined in NetworkManager \" ESSID = \" Wi - Fi network ESSID ( not connection name ) \" interface = $ 1 status = $ 2 case $ status in up | vpn - down ) if iwgetid | grep - qs \" : \\ \" $ ESSID \\ \" \" ; then nmcli connection up id \" $ VPN _ NAME \" passwd - file / path / to /",
        "score": 0.9980783462524414
      },
      {
        "context_type": "resource",
        "createdAt": {
          "$date": "2025-07-01T08:25:34.946Z"
        },
        "children_context_nodes": [
          {
            "$oid": "68639b7f01ecb20c9725da5f"
          }
        ],
        "indexed": true,
        "updatedAt": {
          "$date": "2025-07-01T08:25:34.946Z"
        },
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "corresponding_vector_id": "be96b569a1184c159bd9d13d96ba0257",
        "blob": null,
        "override_policy": false,
        "_id": {
          "$oid": "68639b7f01ecb20c9725da5e"
        },
        "organization_id": null,
        "governing_policies": "inherit",
        "telemetry_data": {},
        "content": "not work for everyone. You will need to restart NetworkManager. service or reboot for this to start working. Once you do, the dispatcher script should open a login window once it detects you are behind a captive portal. Simple solution is captive - portal - sh - shell script that obtains captive portal URL and opens it in your default browser ( for Wayland users only ). Another solution is captive - browser - gitAUR based on Google Chrome. iwd support for captive portal support on legacy hardware Some older Wi - Fi chips ( e",
        "parent_context_nodes": [
          {
            "$oid": "68639b7e01ecb20c9725da5d"
          }
        ],
        "text": "not work for everyone. You will need to restart NetworkManager. service or reboot for this to start working. Once you do, the dispatcher script should open a login window once it detects you are behind a captive portal. Simple solution is captive - portal - sh - shell script that obtains captive portal URL and opens it in your default browser ( for Wayland users only ). Another solution is captive - browser - gitAUR based on Google Chrome. iwd support for captive portal support on legacy hardware Some older Wi - Fi chips ( e",
        "score": 0.997941792011261
      },
      {
        "context_type": "resource",
        "corresponding_vector_id": "eb3f721b1b3b429fabdd257e6e4aa46f",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "parent_context_nodes": [
          {
            "$oid": "68639bab01ecb20c9725daef"
          }
        ],
        "blob": null,
        "_id": {
          "$oid": "68639bab01ecb20c9725daf0"
        },
        "createdAt": {
          "$date": "2025-07-01T08:26:19.270Z"
        },
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "updatedAt": {
          "$date": "2025-07-01T08:26:19.270Z"
        },
        "content": "iwd as the Wi - Fi backend Note : Do not enable iwd. service or manually configure iwd. NetworkManager will start and manage it itself. Consider existing issues before switching to iwd. To enable the experimental iwd backend, first install iwd and then create the following configuration file : / etc / NetworkManager / conf. d / wifi _ backend. conf [ device ] wifi. backend = iwd Alternatively, you can install networkmanager - iwdAUR, a modified package configur",
        "telemetry_data": {},
        "children_context_nodes": [
          {
            "$oid": "68639bab01ecb20c9725daf1"
          }
        ],
        "text": "iwd as the Wi - Fi backend Note : Do not enable iwd. service or manually configure iwd. NetworkManager will start and manage it itself. Consider existing issues before switching to iwd. To enable the experimental iwd backend, first install iwd and then create the following configuration file : / etc / NetworkManager / conf. d / wifi _ backend. conf [ device ] wifi. backend = iwd Alternatively, you can install networkmanager - iwdAUR, a modified package configur",
        "score": 0.9976106882095337
      },
      {
        "context_type": "resource",
        "indexed": true,
        "corresponding_vector_id": "160c795d67294a94be3fe5ec0eb01c64",
        "content": "started and the keyring needs to be unlocked for the following to work. Furthermore, NetworkManager needs to be configured not to store the password for all users. Using GNOME's network - manager - applet, run nm - connection - editor from a terminal, select a network connection, click Edit, select the Wi - Fi Security tab and click on the right icon of password and check Store the password only for this user. Using KDE Wallet Using KDE's plasma - nm, click the applet, click on the top right Set",
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "createdAt": {
          "$date": "2025-07-01T08:26:08.609Z"
        },
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:26:08.609Z"
        },
        "blob": null,
        "children_context_nodes": [
          {
            "$oid": "68639ba101ecb20c9725dace"
          }
        ],
        "override_policy": false,
        "organization_id": null,
        "parent_context_nodes": [
          {
            "$oid": "68639ba001ecb20c9725dacc"
          }
        ],
        "governing_policies": "inherit",
        "telemetry_data": {},
        "_id": {
          "$oid": "68639ba001ecb20c9725dacd"
        },
        "text": "started and the keyring needs to be unlocked for the following to work. Furthermore, NetworkManager needs to be configured not to store the password for all users. Using GNOME's network - manager - applet, run nm - connection - editor from a terminal, select a network connection, click Edit, select the Wi - Fi Security tab and click on the right icon of password and check Store the password only for this user. Using KDE Wallet Using KDE's plasma - nm, click the applet, click on the top right Set",
        "score": 0.997568666934967
      },
      {
        "context_type": "resource",
        "updatedAt": {
          "$date": "2025-07-01T08:26:06.789Z"
        },
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "corresponding_vector_id": "9ea6f2cdeb4a4ed0932f7552adad7888",
        "_id": {
          "$oid": "68639b9e01ecb20c9725dac7"
        },
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "children_context_nodes": [
          {
            "$oid": "68639b9f01ecb20c9725dac8"
          }
        ],
        "override_policy": false,
        "content": "and disconnected from your network, you can now test if NetworkManager will work. The first step is to start NetworkManager. service. Some applets will provide you with a. desktop file so that the NetworkManager applet can be loaded through the application menu. If it does not, you are going to either have to discover the command to use or logout and login again to start the applet. Once the applet is started, it will likely begin polling network connections with for auto - configuration with a DHCP server. To start the GNOME app",
        "organization_id": null,
        "governing_policies": "inherit",
        "telemetry_data": {},
        "createdAt": {
          "$date": "2025-07-01T08:26:06.789Z"
        },
        "parent_context_nodes": [
          {
            "$oid": "68639b9e01ecb20c9725dac6"
          }
        ],
        "text": "and disconnected from your network, you can now test if NetworkManager will work. The first step is to start NetworkManager. service. Some applets will provide you with a. desktop file so that the NetworkManager applet can be loaded through the application menu. If it does not, you are going to either have to discover the command to use or logout and login again to start the applet. Once the applet is started, it will likely begin polling network connections with for auto - configuration with a DHCP server. To start the GNOME app",
        "score": 0.9973570704460144
      },
      {
        "context_type": "resource",
        "indexed": true,
        "corresponding_vector_id": "e08c4f4187d14452ac73613b6e95c9db",
        "_id": {
          "$oid": "68639b7101ecb20c9725da30"
        },
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "createdAt": {
          "$date": "2025-07-01T08:25:20.944Z"
        },
        "blob": null,
        "override_policy": false,
        "updatedAt": {
          "$date": "2025-07-01T08:25:20.944Z"
        },
        "organization_id": null,
        "children_context_nodes": [
          {
            "$oid": "68639b7101ecb20c9725da31"
          }
        ],
        "governing_policies": "inherit",
        "content": "conditional forwarding. These plug - ins may not have a documented command line interface, or may not work at all without an applet running. This is not an issue if you are using a regular desktop environment ; if you are not, you should run # nm - applet while configuring or activating the connection so that you get the necessary dialogues. [ 1 ] Usage NetworkManager comes with nmcli ( 1 ) and nmtui ( 1 ). nmcli examples List nearby Wi - Fi networks : $ nmcli device wifi list Connect to a Wi",
        "telemetry_data": {},
        "parent_context_nodes": [
          {
            "$oid": "68639b7001ecb20c9725da2f"
          }
        ],
        "text": "conditional forwarding. These plug - ins may not have a documented command line interface, or may not work at all without an applet running. This is not an issue if you are using a regular desktop environment ; if you are not, you should run # nm - applet while configuring or activating the connection so that you get the necessary dialogues. [ 1 ] Usage NetworkManager comes with nmcli ( 1 ) and nmtui ( 1 ). nmcli examples List nearby Wi - Fi networks : $ nmcli device wifi list Connect to a Wi",
        "score": 0.9973554611206055
      },
      {
        "context_type": "resource",
        "corresponding_vector_id": "835d935457674323ac34a2e8b981e8c5",
        "children_context_nodes": {},
        "content": "/ NetworkManager / system - connections / Example Wi - Fi. nmconnection. Finally, restart the NetworkManager. service to have the new OpenSSL configuration take effect. See also NetworkManager for Administrators Part 1 Wikipedia : NetworkManager NetworkManager official website",
        "createdAt": {
          "$date": "2025-07-01T08:26:39.988Z"
        },
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "_id": {
          "$oid": "68639bc001ecb20c9725db34"
        },
        "indexable": true,
        "updatedAt": {
          "$date": "2025-07-01T08:26:39.988Z"
        },
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "parent_context_nodes": [
          {
            "$oid": "68639bbf01ecb20c9725db33"
          }
        ],
        "telemetry_data": {},
        "text": "/ NetworkManager / system - connections / Example Wi - Fi. nmconnection. Finally, restart the NetworkManager. service to have the new OpenSSL configuration take effect. See also NetworkManager for Administrators Part 1 Wikipedia : NetworkManager NetworkManager official website",
        "score": 0.9971699118614197
      },
      {
        "context_type": "resource",
        "parent_context_nodes": [
          {
            "$oid": "68639bb801ecb20c9725db1a"
          }
        ],
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "createdAt": {
          "$date": "2025-07-01T08:26:32.357Z"
        },
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "_id": {
          "$oid": "68639bb801ecb20c9725db1b"
        },
        "updatedAt": {
          "$date": "2025-07-01T08:26:32.357Z"
        },
        "content": "( 7 ) Secrets were required, but not provided This error can have numerous causes and you should read the journal ( filter it with - u NetworkManager ). For example, if NetworkManager took too long to establish connection, it will believe that the password is incorrect : NetworkManager [ 1372 ] : < warn > [ 1643991888. 3808 ] device ( wlan0 ) : Activation : ( wifi ) association took too long NetworkManager [ 1372 ] : < info > [ 1643991888. 3809 ] device ( w",
        "governing_policies": "inherit",
        "corresponding_vector_id": "1166073091bf4692adae9811fa5b8323",
        "telemetry_data": {},
        "children_context_nodes": [
          {
            "$oid": "68639bb801ecb20c9725db1c"
          }
        ],
        "text": "( 7 ) Secrets were required, but not provided This error can have numerous causes and you should read the journal ( filter it with - u NetworkManager ). For example, if NetworkManager took too long to establish connection, it will believe that the password is incorrect : NetworkManager [ 1372 ] : < warn > [ 1643991888. 3808 ] device ( wlan0 ) : Activation : ( wifi ) association took too long NetworkManager [ 1372 ] : < info > [ 1643991888. 3809 ] device ( w",
        "score": 0.9970864653587341
      },
      {
        "context_type": "resource",
        "parent_context_nodes": [
          {
            "$oid": "68639bae01ecb20c9725dafb"
          }
        ],
        "_id": {
          "$oid": "68639baf01ecb20c9725dafc"
        },
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "createdAt": {
          "$date": "2025-07-01T08:26:22.916Z"
        },
        "children_context_nodes": [
          {
            "$oid": "68639baf01ecb20c9725dafd"
          }
        ],
        "governing_policies": "inherit",
        "content": "ff is the MAC address of this NIC. The MAC address can be found using the ip link show interface command from the iproute2 package. 3G modem not detected See Mobile broadband modem # NetworkManager. Switching off WLAN on laptops Sometimes NetworkManager will not work when you disable your Wi - Fi adapter with a switch on your laptop and try to enable it again afterwards. This is often a problem with rfkill. To check if the driver notifies rfkill about the wireless adapter's status, use : $",
        "corresponding_vector_id": "2219d1b71dcd4991b252f80631b6899e",
        "updatedAt": {
          "$date": "2025-07-01T08:26:22.916Z"
        },
        "telemetry_data": {},
        "text": "ff is the MAC address of this NIC. The MAC address can be found using the ip link show interface command from the iproute2 package. 3G modem not detected See Mobile broadband modem # NetworkManager. Switching off WLAN on laptops Sometimes NetworkManager will not work when you disable your Wi - Fi adapter with a switch on your laptop and try to enable it again afterwards. This is often a problem with rfkill. To check if the driver notifies rfkill about the wireless adapter's status, use : $",
        "score": 0.9969082474708557
      },
      {
        "context_type": "resource",
        "_id": {
          "$oid": "68639b9e01ecb20c9725dac6"
        },
        "indexed": true,
        "children_context_nodes": [
          {
            "$oid": "68639b9e01ecb20c9725dac7"
          }
        ],
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "createdAt": {
          "$date": "2025-07-01T08:26:06.490Z"
        },
        "governing_policies": "inherit",
        "corresponding_vector_id": "3e19e04d78b441a2b7077d736cb0e05c",
        "parent_context_nodes": [
          {
            "$oid": "68639b9e01ecb20c9725dac5"
          }
        ],
        "content": "server names in the configuration are not overwritten as up, dhcp4 - change, dhcp6 - change and down actions might come in an arbitrary order. Testing NetworkManager applets are designed to load upon login so no further configuration should be necessary for most users. If you have already disabled your previous network settings and disconnected from your network, you can now test if NetworkManager will work. The first step is to start NetworkManager. service. Some applets will provide you with a. desktop file so that the NetworkM",
        "telemetry_data": {},
        "updatedAt": {
          "$date": "2025-07-01T08:26:06.490Z"
        },
        "text": "server names in the configuration are not overwritten as up, dhcp4 - change, dhcp6 - change and down actions might come in an arbitrary order. Testing NetworkManager applets are designed to load upon login so no further configuration should be necessary for most users. If you have already disabled your previous network settings and disconnected from your network, you can now test if NetworkManager will work. The first step is to start NetworkManager. service. Some applets will provide you with a. desktop file so that the NetworkM",
        "score": 0.9967261552810669
      },
      {
        "context_type": "resource",
        "updatedAt": {
          "$date": "2025-07-01T08:25:59.199Z"
        },
        "indexed": true,
        "_id": {
          "$oid": "68639b9701ecb20c9725daae"
        },
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "parent_context_nodes": [
          {
            "$oid": "68639b9701ecb20c9725daad"
          }
        ],
        "content": "of VPN connection defined in NetworkManager \" ESSID = \" Wi - Fi network ESSID ( not connection name ) \" interface = $ 1 status = $ 2 case $ status in up | vpn - down ) if iwgetid | grep - qs \" : \\ \" $ ESSID \\ \" \" ; then nmcli connection up id \" $ VPN _ NAME \" fi ; ; down ) if iwgetid | grep - qs \" : \\ \" $ ESSID \\ \" \" ; then if nmcli connection show - - active",
        "blob": null,
        "children_context_nodes": [
          {
            "$oid": "68639b9701ecb20c9725daaf"
          }
        ],
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "telemetry_data": {},
        "corresponding_vector_id": "f8947d7956a443f5afbecbd92b1c4d8b",
        "createdAt": {
          "$date": "2025-07-01T08:25:59.199Z"
        },
        "text": "of VPN connection defined in NetworkManager \" ESSID = \" Wi - Fi network ESSID ( not connection name ) \" interface = $ 1 status = $ 2 case $ status in up | vpn - down ) if iwgetid | grep - qs \" : \\ \" $ ESSID \\ \" \" ; then nmcli connection up id \" $ VPN _ NAME \" fi ; ; down ) if iwgetid | grep - qs \" : \\ \" $ ESSID \\ \" \" ; then if nmcli connection show - - active",
        "score": 0.9961881041526794
      },
      {
        "context_type": "resource",
        "corresponding_vector_id": "ab2098c76d4544a7b077a1912152c70d",
        "createdAt": {
          "$date": "2025-07-01T08:25:48.271Z"
        },
        "_id": {
          "$oid": "68639b8c01ecb20c9725da8a"
        },
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "content": "assign a firewalld zone based on your current connection. For example a restrictive firewall when at work, and a less restrictive one when at home. This can also be done with NetworkManager dispatcher. Network services with NetworkManager dispatcher There are quite a few network services that you will not want running until NetworkManager brings up an interface. NetworkManager has the ability to start services when you connect to a network and stop them when you disconnect ( e. g. when using NFS, SMB and NTPd ).",
        "source": "*",
        "updatedAt": {
          "$date": "2025-07-01T08:25:48.271Z"
        },
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "parent_context_nodes": [
          {
            "$oid": "68639b8c01ecb20c9725da89"
          }
        ],
        "governing_policies": "inherit",
        "children_context_nodes": [
          {
            "$oid": "68639b8c01ecb20c9725da8b"
          }
        ],
        "telemetry_data": {},
        "text": "assign a firewalld zone based on your current connection. For example a restrictive firewall when at work, and a less restrictive one when at home. This can also be done with NetworkManager dispatcher. Network services with NetworkManager dispatcher There are quite a few network services that you will not want running until NetworkManager brings up an interface. NetworkManager has the ability to start services when you connect to a network and stop them when you disconnect ( e. g. when using NFS, SMB and NTPd ).",
        "score": 0.9953340888023376
      },
      {
        "context_type": "resource",
        "corresponding_vector_id": "e3732c9791ce4bae81f379a2e5c4c0fe",
        "indexed": true,
        "children_context_nodes": [
          {
            "$oid": "68639bba01ecb20c9725db20"
          }
        ],
        "parent_context_nodes": [
          {
            "$oid": "68639bb901ecb20c9725db1e"
          }
        ],
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "content": "Enterprise network like'eduroam'with NetworkManager with the iwd backend then you will get the following error from NetworkManager : Connection'eduroam'is not avialable on device wlan0 because profile is not compatible with device ( 802. 1x connections must have IWD provisioning files ) This is because NetworkManager can not configure a WPA Enterprise network. Therefore you have to configure it using an iwd configuration file / var / lib / iwd / essid. 8021x like described in iwd # WPA Enterprise. Fa",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "createdAt": {
          "$date": "2025-07-01T08:26:33.575Z"
        },
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "updatedAt": {
          "$date": "2025-07-01T08:26:33.575Z"
        },
        "override_policy": false,
        "organization_id": null,
        "_id": {
          "$oid": "68639bb901ecb20c9725db1f"
        },
        "governing_policies": "inherit",
        "telemetry_data": {},
        "text": "Enterprise network like'eduroam'with NetworkManager with the iwd backend then you will get the following error from NetworkManager : Connection'eduroam'is not avialable on device wlan0 because profile is not compatible with device ( 802. 1x connections must have IWD provisioning files ) This is because NetworkManager can not configure a WPA Enterprise network. Therefore you have to configure it using an iwd configuration file / var / lib / iwd / essid. 8021x like described in iwd # WPA Enterprise. Fa",
        "score": 0.9951706528663635
      },
      {
        "context_type": "resource",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "corresponding_vector_id": "6a74a674bb6044bfbc00afc3a776cc52",
        "content": "##v6 loopback : / etc / NetworkManager / dnsmasq. d / ipv6 - listen. conf listen - address = : : 1 In addition, dnsmasq also does not prioritize upstream IPv6 DNS. Unfortunately NetworkManager does not do this ( Ubuntu Bug ). A workaround would be to disable IPv4 DNS in the NetworkManager config, assuming one exists. DNSSEC The dnsmasq instance started by NetworkManager by default will not validate DNSSEC. To enable",
        "parent_context_nodes": [
          {
            "$oid": "68639b8301ecb20c9725da6e"
          }
        ],
        "blob": null,
        "_id": {
          "$oid": "68639b8401ecb20c9725da6f"
        },
        "override_policy": false,
        "createdAt": {
          "$date": "2025-07-01T08:25:40.088Z"
        },
        "organization_id": null,
        "governing_policies": "inherit",
        "updatedAt": {
          "$date": "2025-07-01T08:25:40.088Z"
        },
        "telemetry_data": {},
        "children_context_nodes": [
          {
            "$oid": "68639b8401ecb20c9725da70"
          }
        ],
        "text": "##v6 loopback : / etc / NetworkManager / dnsmasq. d / ipv6 - listen. conf listen - address = : : 1 In addition, dnsmasq also does not prioritize upstream IPv6 DNS. Unfortunately NetworkManager does not do this ( Ubuntu Bug ). A workaround would be to disable IPv4 DNS in the NetworkManager config, assuming one exists. DNSSEC The dnsmasq instance started by NetworkManager by default will not validate DNSSEC. To enable",
        "score": 0.9948562383651733
      },
      {
        "context_type": "resource",
        "_id": {
          "$oid": "68639b8601ecb20c9725da75"
        },
        "content": "is not possible to implement conditional forwarding between two NetworkManager connections. See NetworkManager issue 153. This can be partially mitigated if you set private _ interfaces = \" * \" in / etc / resolvconf. conf [ 6 ]. Any queries for domains that are not in search domain list will not get forwarded. They will be handled according to the local resolver's configuration, for example, forwarded to another DNS server or resolved recursively from the DNS root. Custom DNS servers Setting custom global DNS servers To set DNS servers",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "createdAt": {
          "$date": "2025-07-01T08:25:41.899Z"
        },
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:25:41.899Z"
        },
        "blob": null,
        "override_policy": false,
        "corresponding_vector_id": "3774b6da21fe4ace818a5b759efc3f0a",
        "organization_id": null,
        "governing_policies": "inherit",
        "children_context_nodes": [
          {
            "$oid": "68639b8601ecb20c9725da76"
          }
        ],
        "telemetry_data": {},
        "parent_context_nodes": [
          {
            "$oid": "68639b8501ecb20c9725da74"
          }
        ],
        "text": "is not possible to implement conditional forwarding between two NetworkManager connections. See NetworkManager issue 153. This can be partially mitigated if you set private _ interfaces = \" * \" in / etc / resolvconf. conf [ 6 ]. Any queries for domains that are not in search domain list will not get forwarded. They will be handled according to the local resolver's configuration, for example, forwarded to another DNS server or resolved recursively from the DNS root. Custom DNS servers Setting custom global DNS servers To set DNS servers",
        "score": 0.9948539137840271
      },
      {
        "context_type": "resource",
        "_id": {
          "$oid": "68639b8b01ecb20c9725da88"
        },
        "indexed": true,
        "children_context_nodes": [
          {
            "$oid": "68639b8c01ecb20c9725da89"
          }
        ],
        "parent_context_nodes": [
          {
            "$oid": "68639b8b01ecb20c9725da87"
          }
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:25:47.670Z"
        },
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "corresponding_vector_id": "e0063bdfeeb14c718f452a8246cc3ad0",
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "content": "NetworkManager to use systemd - resolved explicitly. Make sure the systemd - resolvconf package is not installed when systemd - resolved is not used. Unless systemd - resolved. service started, it will break all networking software ( not just NetworkManager ) that use resolvconf. To configure NetworkManager to use openresolv, set main. rc - manager = resolvconf with a configuration file in / etc / NetworkManager / conf. d / : / etc / NetworkManager / conf.",
        "governing_policies": "inherit",
        "telemetry_data": {},
        "createdAt": {
          "$date": "2025-07-01T08:25:47.670Z"
        },
        "text": "NetworkManager to use systemd - resolved explicitly. Make sure the systemd - resolvconf package is not installed when systemd - resolved is not used. Unless systemd - resolved. service started, it will break all networking software ( not just NetworkManager ) that use resolvconf. To configure NetworkManager to use openresolv, set main. rc - manager = resolvconf with a configuration file in / etc / NetworkManager / conf. d / : / etc / NetworkManager / conf.",
        "score": 0.9945417046546936
      },
      {
        "context_type": "resource",
        "corresponding_vector_id": "2e4280381e4a4c369c6d7fe8711fbcdb",
        "indexed": true,
        "updatedAt": {
          "$date": "2025-07-01T08:26:32.662Z"
        },
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "children_context_nodes": [
          {
            "$oid": "68639bb901ecb20c9725db1d"
          }
        ],
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "content": "##991888. 3808 ] device ( wlan0 ) : Activation : ( wifi ) association took too long NetworkManager [ 1372 ] : < info > [ 1643991888. 3809 ] device ( wlan0 ) : state change : config - > need - auth ( reason'none ', sys - iface - state :'managed') NetworkManager [ 1372 ] : < warn > [ 1643991888. 3838 ] device ( wlan0 ) : Activation : ( wifi ) asking for new secrets You can",
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "telemetry_data": {},
        "parent_context_nodes": [
          {
            "$oid": "68639bb801ecb20c9725db1b"
          }
        ],
        "_id": {
          "$oid": "68639bb801ecb20c9725db1c"
        },
        "createdAt": {
          "$date": "2025-07-01T08:26:32.662Z"
        },
        "text": "##991888. 3808 ] device ( wlan0 ) : Activation : ( wifi ) association took too long NetworkManager [ 1372 ] : < info > [ 1643991888. 3809 ] device ( wlan0 ) : state change : config - > need - auth ( reason'none ', sys - iface - state :'managed') NetworkManager [ 1372 ] : < warn > [ 1643991888. 3838 ] device ( wlan0 ) : Activation : ( wifi ) asking for new secrets You can",
        "score": 0.9945191740989685
      },
      {
        "context_type": "resource",
        "children_context_nodes": [
          {
            "$oid": "68639bb901ecb20c9725db1f"
          }
        ],
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "createdAt": {
          "$date": "2025-07-01T08:26:33.271Z"
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "corresponding_vector_id": "3dae4e006d804954bf293c386bffc76e",
        "updatedAt": {
          "$date": "2025-07-01T08:26:33.271Z"
        },
        "blob": null,
        "override_policy": false,
        "_id": {
          "$oid": "68639bb901ecb20c9725db1e"
        },
        "organization_id": null,
        "content": "device wifi connect SSID password password You can also try disabling MAC address randomization : / etc / NetworkManager / conf. d / wifi _ rand _ mac. conf [ device ] wifi. scan - rand - mac - address = no WPA Enterprise connection with iwd If you try to connect to an WPA Enterprise network like'eduroam'with NetworkManager with the iwd backend then you will get the following error from NetworkManager : Connection'eduroam'is not avialable on device wlan0 because profile",
        "governing_policies": "inherit",
        "parent_context_nodes": [
          {
            "$oid": "68639bb901ecb20c9725db1d"
          }
        ],
        "telemetry_data": {},
        "text": "device wifi connect SSID password password You can also try disabling MAC address randomization : / etc / NetworkManager / conf. d / wifi _ rand _ mac. conf [ device ] wifi. scan - rand - mac - address = no WPA Enterprise connection with iwd If you try to connect to an WPA Enterprise network like'eduroam'with NetworkManager with the iwd backend then you will get the following error from NetworkManager : Connection'eduroam'is not avialable on device wlan0 because profile",
        "score": 0.9935805797576904
      },
      {
        "context_type": "resource",
        "createdAt": {
          "$date": "2025-07-01T08:25:17.541Z"
        },
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "children_context_nodes": [
          {
            "$oid": "68639b6e01ecb20c9725da26"
          }
        ],
        "source": "*",
        "updatedAt": {
          "$date": "2025-07-01T08:25:17.541Z"
        },
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "corresponding_vector_id": "b9b43aead7eb4e47bcb4663b083ca3ab",
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "_id": {
          "$oid": "68639b6d01ecb20c9725da25"
        },
        "telemetry_data": {},
        "parent_context_nodes": [
          {
            "$oid": "68639b6d01ecb20c9725da24"
          }
        ],
        "content": "- aware applications can switch from online and offline mode. NetworkManager also prefers wired connections over wireless ones, has support for modem connections and certain types of VPN. NetworkManager was originally developed by Red Hat and now is hosted by the GNOME project. Warning : By default, secrets ( e. g. Wi - Fi passwords ) are accessible to the root user in the filesystem and to users with access to settings via the GUI ( e. g. nm - applet ). see # Encrypted Wi - Fi passwords. Installa",
        "text": "- aware applications can switch from online and offline mode. NetworkManager also prefers wired connections over wireless ones, has support for modem connections and certain types of VPN. NetworkManager was originally developed by Red Hat and now is hosted by the GNOME project. Warning : By default, secrets ( e. g. Wi - Fi passwords ) are accessible to the root user in the filesystem and to users with access to settings via the GUI ( e. g. nm - applet ). see # Encrypted Wi - Fi passwords. Installa",
        "score": 0.9926498532295227
      },
      {
        "context_type": "resource",
        "parent_context_nodes": [
          {
            "$oid": "68639bb201ecb20c9725db07"
          }
        ],
        "content": "the system, because the setting is only read on boot. Automatic connect to VPN on boot is not working The problem occurs when the system ( i. e. NetworkManager running as the root user ) tries to establish a VPN connection, but the password is not accessible because it is stored in the GNOME Keyring of a particular user. A solution is to keep the password to your VPN in plaintext, as described in step ( 2. ) of # Use dispatcher to connect to a VPN after a network connection is established. You do not need to use the",
        "indexed": true,
        "updatedAt": {
          "$date": "2025-07-01T08:26:26.569Z"
        },
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "children_context_nodes": [
          {
            "$oid": "68639bb301ecb20c9725db09"
          }
        ],
        "scopes": [
          "basic.internal"
        ],
        "_id": {
          "$oid": "68639bb201ecb20c9725db08"
        },
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "telemetry_data": {},
        "corresponding_vector_id": "8fbdc535ad5348869e3706b08819de6a",
        "createdAt": {
          "$date": "2025-07-01T08:26:26.569Z"
        },
        "text": "the system, because the setting is only read on boot. Automatic connect to VPN on boot is not working The problem occurs when the system ( i. e. NetworkManager running as the root user ) tries to establish a VPN connection, but the password is not accessible because it is stored in the GNOME Keyring of a particular user. A solution is to keep the password to your VPN in plaintext, as described in step ( 2. ) of # Use dispatcher to connect to a VPN after a network connection is established. You do not need to use the",
        "score": 0.992316484451294
      },
      {
        "context_type": "resource",
        "children_context_nodes": [
          {
            "$oid": "68639bb101ecb20c9725db03"
          }
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:26:24.743Z"
        },
        "indexed": true,
        "content": "one with the following command : # rm / etc / NetworkManager / system - connections / SSID. nmconnection This also works for any other connection. VPN not working in GNOME When setting up OpenConnect or vpnc connections in NetworkManager while using GNOME, you will sometimes never see the dialog box pop up and the following error appears in / var / log / errors. log : localhost NetworkManager [ 399 ] : < error > [ 1361719690. 10506 ] [ nm - vpn - connection",
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "_id": {
          "$oid": "68639bb001ecb20c9725db02"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "corresponding_vector_id": "baa5b0efb68a436bb2ee2d109f89319b",
        "telemetry_data": {},
        "parent_context_nodes": [
          {
            "$oid": "68639bb001ecb20c9725db01"
          }
        ],
        "createdAt": {
          "$date": "2025-07-01T08:26:24.743Z"
        },
        "text": "one with the following command : # rm / etc / NetworkManager / system - connections / SSID. nmconnection This also works for any other connection. VPN not working in GNOME When setting up OpenConnect or vpnc connections in NetworkManager while using GNOME, you will sometimes never see the dialog box pop up and the following error appears in / var / log / errors. log : localhost NetworkManager [ 399 ] : < error > [ 1361719690. 10506 ] [ nm - vpn - connection",
        "score": 0.9919856786727905
      },
      {
        "context_type": "resource",
        "indexed": true,
        "_id": {
          "$oid": "68639b8001ecb20c9725da64"
        },
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "children_context_nodes": [
          {
            "$oid": "68639b8101ecb20c9725da65"
          }
        ],
        "corresponding_vector_id": "37f6df6cfd5948a1b677bd34fb7686b5",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "parent_context_nodes": [
          {
            "$oid": "68639b8001ecb20c9725da63"
          }
        ],
        "createdAt": {
          "$date": "2025-07-01T08:25:36.758Z"
        },
        "blob": null,
        "override_policy": false,
        "content": "##f. d / dhcp - client. conf [ main ] dhcp = dhcpcd Note : Do not enable the systemd units shipped with the dhclient and dhcpcd packages. They will conflict with NetworkManager, see the note in # Installation for details. DNS management NetworkManager's DNS management is described in the GNOME project's wiki page [UNK] Projects / NetworkManager / DNS. DNS caching and conditional forwarding NetworkManager has a plugin to enable",
        "organization_id": null,
        "governing_policies": "inherit",
        "updatedAt": {
          "$date": "2025-07-01T08:25:36.758Z"
        },
        "telemetry_data": {},
        "text": "##f. d / dhcp - client. conf [ main ] dhcp = dhcpcd Note : Do not enable the systemd units shipped with the dhclient and dhcpcd packages. They will conflict with NetworkManager, see the note in # Installation for details. DNS management NetworkManager's DNS management is described in the GNOME project's wiki page [UNK] Projects / NetworkManager / DNS. DNS caching and conditional forwarding NetworkManager has a plugin to enable",
        "score": 0.9919384121894836
      },
      {
        "context_type": "resource",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "content": "##ets ( Wi - Fi ) NetworkManager does a scan every 2 minutes. Some Wi - Fi drivers have issues when scanning for base stations whilst connected / associated. Symptoms include VPN disconnects / reconnects and lost packets, web pages failing to load and then refresh fine. Running journalctl - f as root will indicate that this is taking place, messages like the following will be contained in the logs at regular intervals. NetworkManager [ 410 ] : < info > ( wlp3s0 ) : roamed from BSSID",
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "_id": {
          "$oid": "68639bb301ecb20c9725db0b"
        },
        "corresponding_vector_id": "c0c5368a4bc44762a2a8b71ecc4c970e",
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "createdAt": {
          "$date": "2025-07-01T08:26:27.482Z"
        },
        "governing_policies": "inherit",
        "children_context_nodes": [
          {
            "$oid": "68639bb301ecb20c9725db0c"
          }
        ],
        "parent_context_nodes": [
          {
            "$oid": "68639bb301ecb20c9725db0a"
          }
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:26:27.482Z"
        },
        "telemetry_data": {},
        "text": "##ets ( Wi - Fi ) NetworkManager does a scan every 2 minutes. Some Wi - Fi drivers have issues when scanning for base stations whilst connected / associated. Symptoms include VPN disconnects / reconnects and lost packets, web pages failing to load and then refresh fine. Running journalctl - f as root will indicate that this is taking place, messages like the following will be contained in the logs at regular intervals. NetworkManager [ 410 ] : < info > ( wlp3s0 ) : roamed from BSSID",
        "score": 0.9917619228363037
      },
      {
        "context_type": "resource",
        "corresponding_vector_id": "fce87b8d87eb4b84a063207833a23af6",
        "content": "Shared to other computers \". Save Now you should have a new option \" Shared Internet \" under the Wired connections in NetworkManager. Checking if networking is up inside a cron job or script Some cron jobs require networking to be up to succeed. You may wish to avoid running these jobs when the network is down. To accomplish this, add an if test for networking that queries NetworkManager's nm - tool and checks the state of networking. The test shown here succeeds if any interface is up, and fails if they are",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "createdAt": {
          "$date": "2025-07-01T08:26:11.358Z"
        },
        "parent_context_nodes": [
          {
            "$oid": "68639ba301ecb20c9725dad5"
          }
        ],
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:26:11.358Z"
        },
        "blob": null,
        "children_context_nodes": [
          {
            "$oid": "68639ba301ecb20c9725dad7"
          }
        ],
        "_id": {
          "$oid": "68639ba301ecb20c9725dad6"
        },
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "telemetry_data": {},
        "text": "Shared to other computers \". Save Now you should have a new option \" Shared Internet \" under the Wired connections in NetworkManager. Checking if networking is up inside a cron job or script Some cron jobs require networking to be up to succeed. You may wish to avoid running these jobs when the network is down. To accomplish this, add an if test for networking that queries NetworkManager's nm - tool and checks the state of networking. The test shown here succeeds if any interface is up, and fails if they are",
        "score": 0.9902048110961914
      },
      {
        "context_type": "resource",
        "indexed": true,
        "parent_context_nodes": [
          {
            "$oid": "68639b7601ecb20c9725da43"
          }
        ],
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "_id": {
          "$oid": "68639b7701ecb20c9725da44"
        },
        "content": "- applet. It provides all essential features such as connection to existing NetworkManager Wi - Fi or wired connections, connect to new Wi - Fi connections, requests passphrase if required, connect to existing VPN connections, enable / disable networking, launch nm - connection - editor GUI, connect to Bluetooth networks. switchboard Pantheon's switchboard offers a desktop environment - agnostic way to configure NetworkManager when combined with switchboard - plug - network and nm - connection - editor. It can be ran with the following command : $ io.",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "createdAt": {
          "$date": "2025-07-01T08:25:27.028Z"
        },
        "children_context_nodes": [
          {
            "$oid": "68639b7701ecb20c9725da45"
          }
        ],
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "updatedAt": {
          "$date": "2025-07-01T08:25:27.028Z"
        },
        "governing_policies": "inherit",
        "corresponding_vector_id": "a515191d6b6d46b19541096a19101302",
        "telemetry_data": {},
        "text": "- applet. It provides all essential features such as connection to existing NetworkManager Wi - Fi or wired connections, connect to new Wi - Fi connections, requests passphrase if required, connect to existing VPN connections, enable / disable networking, launch nm - connection - editor GUI, connect to Bluetooth networks. switchboard Pantheon's switchboard offers a desktop environment - agnostic way to configure NetworkManager when combined with switchboard - plug - network and nm - connection - editor. It can be ran with the following command : $ io.",
        "score": 0.9901633262634277
      },
      {
        "context_type": "resource",
        "parent_context_nodes": [
          {
            "$oid": "68639ba401ecb20c9725dad9"
          }
        ],
        "indexed": true,
        "createdAt": {
          "$date": "2025-07-01T08:26:12.563Z"
        },
        "children_context_nodes": [
          {
            "$oid": "68639ba501ecb20c9725dadb"
          }
        ],
        "_id": {
          "$oid": "68639ba401ecb20c9725dada"
        },
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:26:12.563Z"
        },
        "scopes": [
          "basic.internal"
        ],
        "content": "##terisk, you could grep for the network name and then grep for a literal asterisk. Connect to network with secret on boot By default, NetworkManager will not connect to networks requiring a secret automatically on boot. This is because it locks such connections to the user who makes it by default, only connecting after they have logged in. To change this, do the following : Right click on the nm - applet icon in your panel and select Edit Connections and open the Wireless tab Select the connection you want to work with and click the Edit button Check the boxes",
        "corresponding_vector_id": "e3eb3f2f034b457bb37316ca94509b43",
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "telemetry_data": {},
        "text": "##terisk, you could grep for the network name and then grep for a literal asterisk. Connect to network with secret on boot By default, NetworkManager will not connect to networks requiring a secret automatically on boot. This is because it locks such connections to the user who makes it by default, only connecting after they have logged in. To change this, do the following : Right click on the nm - applet icon in your panel and select Edit Connections and open the Wireless tab Select the connection you want to work with and click the Edit button Check the boxes",
        "score": 0.988699734210968
      },
      {
        "context_type": "resource",
        "_id": {
          "$oid": "68639b7a01ecb20c9725da4e"
        },
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "parent_context_nodes": [
          {
            "$oid": "68639b7901ecb20c9725da4d"
          }
        ],
        "corresponding_vector_id": "9703d9a51aaf4e8f9ba842540978084d",
        "content": "##ule ( function ( action, subject ) { if ( action. id. indexOf ( \" org. freedesktop. NetworkManager. \" ) = = 0 & & subject. isInGroup ( \" network \" ) ) { return polkit. Result. YES ; } } ) ; All users in the network group will be able to add and remove networks without a password ( which means you do not have to run a Polkit authentication agent, so this option will also work in SSH sessions ). Proxy settings NetworkManager does support some",
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "createdAt": {
          "$date": "2025-07-01T08:25:30.083Z"
        },
        "governing_policies": "inherit",
        "updatedAt": {
          "$date": "2025-07-01T08:25:30.083Z"
        },
        "telemetry_data": {},
        "children_context_nodes": [
          {
            "$oid": "68639b7a01ecb20c9725da4f"
          }
        ],
        "text": "##ule ( function ( action, subject ) { if ( action. id. indexOf ( \" org. freedesktop. NetworkManager. \" ) = = 0 & & subject. isInGroup ( \" network \" ) ) { return polkit. Result. YES ; } } ) ; All users in the network group will be able to add and remove networks without a password ( which means you do not have to run a Polkit authentication agent, so this option will also work in SSH sessions ). Proxy settings NetworkManager does support some",
        "score": 0.9879101514816284
      },
      {
        "context_type": "resource",
        "indexed": true,
        "children_context_nodes": [
          {
            "$oid": "68639b481ecc580d6fe69894"
          },
          {
            "$oid": "68639b6d01ecb20c9725da25"
          }
        ],
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "corresponding_vector_id": "903f04453bf94fb4b91d506b36b207ea",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "createdAt": {
          "$date": "2025-07-01T08:25:16.529Z"
        },
        "blob": null,
        "override_policy": false,
        "parent_context_nodes": {},
        "organization_id": null,
        "updatedAt": {
          "$date": "2025-07-01T08:25:16.529Z"
        },
        "governing_policies": "inherit",
        "content": "Related articles Network configuration Wireless network configuration NetworkManager is a program for providing detection and configuration for systems to automatically connect to networks. NetworkManager's functionality can be useful for both wireless and wired networks. For wireless networks, NetworkManager prefers known wireless networks and has the ability to switch to the most reliable network. NetworkManager - aware applications can switch from online and offline mode. NetworkManager also prefers wired connections over wireless ones, has support for modem connections and certain types of VPN. NetworkManager was originally developed by Red Hat and",
        "telemetry_data": {},
        "_id": {
          "$oid": "68639b6d01ecb20c9725da24"
        },
        "text": "Related articles Network configuration Wireless network configuration NetworkManager is a program for providing detection and configuration for systems to automatically connect to networks. NetworkManager's functionality can be useful for both wireless and wired networks. For wireless networks, NetworkManager prefers known wireless networks and has the ability to switch to the most reliable network. NetworkManager - aware applications can switch from online and offline mode. NetworkManager also prefers wired connections over wireless ones, has support for modem connections and certain types of VPN. NetworkManager was originally developed by Red Hat and",
        "score": 0.9872826337814331
      },
      {
        "context_type": "resource",
        "parent_context_nodes": [
          {
            "$oid": "68639b7101ecb20c9725da30"
          }
        ],
        "createdAt": {
          "$date": "2025-07-01T08:25:21.248Z"
        },
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "updatedAt": {
          "$date": "2025-07-01T08:25:21.248Z"
        },
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "corresponding_vector_id": "11359cd6795d4a108a36b81b857a3f3a",
        "content": "##s. [ 1 ] Usage NetworkManager comes with nmcli ( 1 ) and nmtui ( 1 ). nmcli examples List nearby Wi - Fi networks : $ nmcli device wifi list Connect to a Wi - Fi network : $ nmcli device wifi connect SSID _ or _ BSSID password password Connect to a hidden Wi - Fi network : $ nmcli device wifi connect SSID _ or _ BSSID password password hidden yes Connect to a Wi - Fi on the wlan1 interface : $ nmcli",
        "blob": null,
        "_id": {
          "$oid": "68639b7101ecb20c9725da31"
        },
        "override_policy": false,
        "organization_id": null,
        "children_context_nodes": [
          {
            "$oid": "68639b7101ecb20c9725da32"
          }
        ],
        "governing_policies": "inherit",
        "telemetry_data": {},
        "text": "##s. [ 1 ] Usage NetworkManager comes with nmcli ( 1 ) and nmtui ( 1 ). nmcli examples List nearby Wi - Fi networks : $ nmcli device wifi list Connect to a Wi - Fi network : $ nmcli device wifi connect SSID _ or _ BSSID password password Connect to a hidden Wi - Fi network : $ nmcli device wifi connect SSID _ or _ BSSID password password hidden yes Connect to a Wi - Fi on the wlan1 interface : $ nmcli",
        "score": 0.985895574092865
      },
      {
        "context_type": "resource",
        "indexed": true,
        "parent_context_nodes": [
          {
            "$oid": "68639baa01ecb20c9725daed"
          }
        ],
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "content": "generating the connection, it does not know whether there will be more Ethernet adapters available. Hence, it calls the first wired connection \" Wired connection 1 \". You can avoid generating this connection, by configuring no - auto - default ( see NetworkManager. conf ( 5 ) ), or by simply deleting it. Then NetworkManager will remember not to generate a connection for this interface again. You can also edit the connection ( and persist it to disk ) or delete it. NetworkManager will not re - generate a new connection. Then",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "createdAt": {
          "$date": "2025-07-01T08:26:18.664Z"
        },
        "_id": {
          "$oid": "68639baa01ecb20c9725daee"
        },
        "telemetry_data": {},
        "children_context_nodes": [
          {
            "$oid": "68639bab01ecb20c9725daef"
          }
        ],
        "corresponding_vector_id": "280ea28c4489468ab69fb573c3137410",
        "updatedAt": {
          "$date": "2025-07-01T08:26:18.664Z"
        },
        "text": "generating the connection, it does not know whether there will be more Ethernet adapters available. Hence, it calls the first wired connection \" Wired connection 1 \". You can avoid generating this connection, by configuring no - auto - default ( see NetworkManager. conf ( 5 ) ), or by simply deleting it. Then NetworkManager will remember not to generate a connection for this interface again. You can also edit the connection ( and persist it to disk ) or delete it. NetworkManager will not re - generate a new connection. Then",
        "score": 0.9848147630691528
      },
      {
        "context_type": "resource",
        "updatedAt": {
          "$date": "2025-07-01T08:26:21.998Z"
        },
        "_id": {
          "$oid": "68639bae01ecb20c9725daf9"
        },
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "corresponding_vector_id": "f528f4db37a1413f95a1e1061b37ccf6",
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "telemetry_data": {},
        "children_context_nodes": [
          {
            "$oid": "68639bae01ecb20c9725dafa"
          }
        ],
        "parent_context_nodes": [
          {
            "$oid": "68639bad01ecb20c9725daf8"
          }
        ],
        "createdAt": {
          "$date": "2025-07-01T08:26:21.998Z"
        },
        "content": "##crypted form, follow GNOME Keyring to set up the gnome - keyring - daemon. Network management disabled When NetworkManager shuts down but the pid ( state ) file is not removed, you will see a Network management disabled message. If this happens, remove the file manually : # rm / var / lib / NetworkManager / NetworkManager. state Problems with internal DHCP client If you have problems with getting an IP address using the internal DHCP client, consider using another DHCP client, see # DHCP client for instructions. This workaro",
        "text": "##crypted form, follow GNOME Keyring to set up the gnome - keyring - daemon. Network management disabled When NetworkManager shuts down but the pid ( state ) file is not removed, you will see a Network management disabled message. If this happens, remove the file manually : # rm / var / lib / NetworkManager / NetworkManager. state Problems with internal DHCP client If you have problems with getting an IP address using the internal DHCP client, consider using another DHCP client, see # DHCP client for instructions. This workaro",
        "score": 0.9826070666313171
      },
      {
        "context_type": "resource",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "children_context_nodes": [
          {
            "$oid": "68639b8a01ecb20c9725da82"
          }
        ],
        "blob": null,
        "createdAt": {
          "$date": "2025-07-01T08:25:45.548Z"
        },
        "corresponding_vector_id": "5cefd182317e4c1eb1fe94dd29b03547",
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "updatedAt": {
          "$date": "2025-07-01T08:25:45.548Z"
        },
        "telemetry_data": {},
        "_id": {
          "$oid": "68639b8901ecb20c9725da81"
        },
        "content": "a subscriber. Note that conditional forwarding is not yet fully supported when using NetworkManager with openresolv. NetworkManager also offers hooks via so called dispatcher scripts that can be used to alter the / etc / resolv. conf after network changes. See # Network services with NetworkManager dispatcher and NetworkManager ( 8 ) for more information. Note : If NetworkManager is configured to use either dnsmasq or systemd - resolved, then the appropriate loopback addresses will be written to / etc",
        "parent_context_nodes": [
          {
            "$oid": "68639b8901ecb20c9725da80"
          }
        ],
        "text": "a subscriber. Note that conditional forwarding is not yet fully supported when using NetworkManager with openresolv. NetworkManager also offers hooks via so called dispatcher scripts that can be used to alter the / etc / resolv. conf after network changes. See # Network services with NetworkManager dispatcher and NetworkManager ( 8 ) for more information. Note : If NetworkManager is configured to use either dnsmasq or systemd - resolved, then the appropriate loopback addresses will be written to / etc",
        "score": 0.9825572371482849
      },
      {
        "context_type": "resource",
        "indexed": true,
        "parent_context_nodes": [
          {
            "$oid": "68639b9c01ecb20c9725dabe"
          }
        ],
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "content": "s ). The dispatcher can work around it. Create the overlay directory for your systemd - timesyncd configuration / etc / systemd / timesyncd. conf. d if it does not already exist. Inside / etc / NetworkManager / dispatcher. d, put the following : / etc / NetworkManager / dispatcher. d / 10 - update - timesyncd #! / bin / sh [ - z \" $ CONNECTION _ UUID \" ] & & exit 0 INTERFACE = \" $ 1",
        "source": "*",
        "createdAt": {
          "$date": "2025-07-01T08:26:04.373Z"
        },
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "updatedAt": {
          "$date": "2025-07-01T08:26:04.373Z"
        },
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "_id": {
          "$oid": "68639b9c01ecb20c9725dabf"
        },
        "children_context_nodes": [
          {
            "$oid": "68639b9c01ecb20c9725dac0"
          }
        ],
        "corresponding_vector_id": "d82859b0ece0488e9218b36ebeff53ea",
        "telemetry_data": {},
        "text": "s ). The dispatcher can work around it. Create the overlay directory for your systemd - timesyncd configuration / etc / systemd / timesyncd. conf. d if it does not already exist. Inside / etc / NetworkManager / dispatcher. d, put the following : / etc / NetworkManager / dispatcher. d / 10 - update - timesyncd #! / bin / sh [ - z \" $ CONNECTION _ UUID \" ] & & exit 0 INTERFACE = \" $ 1",
        "score": 0.9821910858154297
      },
      {
        "context_type": "resource",
        "indexed": true,
        "updatedAt": {
          "$date": "2025-07-01T08:25:20.640Z"
        },
        "_id": {
          "$oid": "68639b7001ecb20c9725da2f"
        },
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "override_policy": false,
        "children_context_nodes": [
          {
            "$oid": "68639b7101ecb20c9725da30"
          }
        ],
        "organization_id": null,
        "governing_policies": "inherit",
        "telemetry_data": {},
        "corresponding_vector_id": "77023c492d4e46f68f7436fb7d91ef73",
        "content": "- l2tp networkmanager - sshAUR network - manager - sstp Warning : There are a lot of bugs related to VPN support. Check the daemon processes options set via the GUI correctly and double - check with each package release. Note : To have fully functioning DNS resolution when using VPN, you should set up conditional forwarding. These plug - ins may not have a documented command line interface, or may not work at all without an applet running. This is not an issue if you are using a regular desktop environment ; if you are not",
        "createdAt": {
          "$date": "2025-07-01T08:25:20.640Z"
        },
        "parent_context_nodes": [
          {
            "$oid": "68639b7001ecb20c9725da2e"
          }
        ],
        "text": "- l2tp networkmanager - sshAUR network - manager - sstp Warning : There are a lot of bugs related to VPN support. Check the daemon processes options set via the GUI correctly and double - check with each package release. Note : To have fully functioning DNS resolution when using VPN, you should set up conditional forwarding. These plug - ins may not have a documented command line interface, or may not work at all without an applet running. This is not an issue if you are using a regular desktop environment ; if you are not",
        "score": 0.9803470373153687
      },
      {
        "context_type": "resource",
        "indexed": true,
        "corresponding_vector_id": "8af3e4daa4a049d18588d9a6d2a874f9",
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "createdAt": {
          "$date": "2025-07-01T08:25:48.577Z"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:25:48.577Z"
        },
        "content": "##Manager brings up an interface. NetworkManager has the ability to start services when you connect to a network and stop them when you disconnect ( e. g. when using NFS, SMB and NTPd ). To activate the feature you need to enable and start the NetworkManager - dispatcher. service. Once the service is active, scripts can be added to the / etc / NetworkManager / dispatcher. d directory. Scripts must be owned by root, otherwise the dispatcher will not execute them. For added",
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "telemetry_data": {},
        "children_context_nodes": [
          {
            "$oid": "68639b8d01ecb20c9725da8c"
          }
        ],
        "_id": {
          "$oid": "68639b8c01ecb20c9725da8b"
        },
        "parent_context_nodes": [
          {
            "$oid": "68639b8c01ecb20c9725da8a"
          }
        ],
        "text": "##Manager brings up an interface. NetworkManager has the ability to start services when you connect to a network and stop them when you disconnect ( e. g. when using NFS, SMB and NTPd ). To activate the feature you need to enable and start the NetworkManager - dispatcher. service. Once the service is active, scripts can be added to the / etc / NetworkManager / dispatcher. d directory. Scripts must be owned by root, otherwise the dispatcher will not execute them. For added",
        "score": 0.9798157215118408
      },
      {
        "context_type": "resource",
        "updatedAt": {
          "$date": "2025-07-01T08:25:39.784Z"
        },
        "indexed": true,
        "parent_context_nodes": [
          {
            "$oid": "68639b8301ecb20c9725da6d"
          }
        ],
        "corresponding_vector_id": "a34c176eff964747bb497fb52f79c558",
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "_id": {
          "$oid": "68639b8301ecb20c9725da6e"
        },
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "telemetry_data": {},
        "content": "8 ) for all available options. IPv6 Enabling dnsmasq in NetworkManager may break IPv6 - only DNS lookups ( i. e. drill - 6 [ hostname ] ) which would otherwise work. In order to resolve this, creating the following file will configure dnsmasq to also listen to the IPv6 loopback : / etc / NetworkManager / dnsmasq. d / ipv6 - listen. conf listen - address = : : 1 In addition, dnsmasq also does not prioritize ups",
        "createdAt": {
          "$date": "2025-07-01T08:25:39.784Z"
        },
        "children_context_nodes": [
          {
            "$oid": "68639b8401ecb20c9725da6f"
          }
        ],
        "text": "8 ) for all available options. IPv6 Enabling dnsmasq in NetworkManager may break IPv6 - only DNS lookups ( i. e. drill - 6 [ hostname ] ) which would otherwise work. In order to resolve this, creating the following file will configure dnsmasq to also listen to the IPv6 loopback : / etc / NetworkManager / dnsmasq. d / ipv6 - listen. conf listen - address = : : 1 In addition, dnsmasq also does not prioritize ups",
        "score": 0.9783565402030945
      },
      {
        "context_type": "resource",
        "updatedAt": {
          "$date": "2025-07-01T08:26:24.438Z"
        },
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "corresponding_vector_id": "e3e4a95a08684e9d83f514a4cc874ea8",
        "parent_context_nodes": [
          {
            "$oid": "68639bb001ecb20c9725db00"
          }
        ],
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "override_policy": false,
        "content": ") and uncheck \" Connect automatically \". Click Apply and close the connection editor. Cannot edit connections as normal user See # Set up PolicyKit permissions. Forget hidden wireless network Since hidden networks are not displayed in the selection list of the Wireless view, they cannot be forgotten ( removed ) with the GUI. You can delete one with the following command : # rm / etc / NetworkManager / system - connections / SSID. nmconnection This also works for any other connection. VPN not working in GNOME When setting up OpenConne",
        "organization_id": null,
        "_id": {
          "$oid": "68639bb001ecb20c9725db01"
        },
        "children_context_nodes": [
          {
            "$oid": "68639bb001ecb20c9725db02"
          }
        ],
        "governing_policies": "inherit",
        "telemetry_data": {},
        "createdAt": {
          "$date": "2025-07-01T08:26:24.438Z"
        },
        "text": ") and uncheck \" Connect automatically \". Click Apply and close the connection editor. Cannot edit connections as normal user See # Set up PolicyKit permissions. Forget hidden wireless network Since hidden networks are not displayed in the selection list of the Wireless view, they cannot be forgotten ( removed ) with the GUI. You can delete one with the following command : # rm / etc / NetworkManager / system - connections / SSID. nmconnection This also works for any other connection. VPN not working in GNOME When setting up OpenConne",
        "score": 0.9775599241256714
      },
      {
        "context_type": "resource",
        "indexed": true,
        "createdAt": {
          "$date": "2025-07-01T08:26:32.051Z"
        },
        "_id": {
          "$oid": "68639bb801ecb20c9725db1a"
        },
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:26:32.051Z"
        },
        "scopes": [
          "basic.internal"
        ],
        "children_context_nodes": [
          {
            "$oid": "68639bb801ecb20c9725db1b"
          }
        ],
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "telemetry_data": {},
        "parent_context_nodes": [
          {
            "$oid": "68639bb701ecb20c9725db19"
          }
        ],
        "corresponding_vector_id": "a9886e6d045f4237a96fd33b1c1c916b",
        "content": "##Manager / conf. d / no - systemd - resolved. conf [ main ] systemd - resolved = false See FS # 62138. Secrets were required, but not provided If you received the following error when attempting to connect to a network : $ nmcli device wifi connect SSID password password Error : Connection activation failed : ( 7 ) Secrets were required, but not provided This error can have numerous causes and you should read the journal ( filter it with - u NetworkManager ). For example, if NetworkManager took too long to establish connection, it",
        "text": "##Manager / conf. d / no - systemd - resolved. conf [ main ] systemd - resolved = false See FS # 62138. Secrets were required, but not provided If you received the following error when attempting to connect to a network : $ nmcli device wifi connect SSID password password Error : Connection activation failed : ( 7 ) Secrets were required, but not provided This error can have numerous causes and you should read the journal ( filter it with - u NetworkManager ). For example, if NetworkManager took too long to establish connection, it",
        "score": 0.9760308265686035
      },
      {
        "context_type": "resource",
        "_id": {
          "$oid": "68639b9501ecb20c9725daa8"
        },
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "children_context_nodes": [
          {
            "$oid": "68639b9501ecb20c9725daa9"
          }
        ],
        "override_policy": false,
        "organization_id": null,
        "parent_context_nodes": [
          {
            "$oid": "68639b9501ecb20c9725daa7"
          }
        ],
        "governing_policies": "inherit",
        "createdAt": {
          "$date": "2025-07-01T08:25:57.393Z"
        },
        "content": "##ing that wlp3s0 ( or whatever your Wi - Fi interface is called ) is in state DOWN. If you encounter unexpected behavior, check the journal of NetworkManager - dispatcher. service. / etc / NetworkManager / dispatcher. d / 99 - wifi - auto - toggle #! / bin / sh LOG _ PREFIX = \" WiFi Auto - Toggle \" ETHERNET _ INTERFACE = \" Your _ Ethernet _ Interface \" if [ \" $ 1 \" = \" $ ETHERNET",
        "corresponding_vector_id": "9744159e86904943bf9f3728be290a0c",
        "telemetry_data": {},
        "updatedAt": {
          "$date": "2025-07-01T08:25:57.393Z"
        },
        "text": "##ing that wlp3s0 ( or whatever your Wi - Fi interface is called ) is in state DOWN. If you encounter unexpected behavior, check the journal of NetworkManager - dispatcher. service. / etc / NetworkManager / dispatcher. d / 99 - wifi - auto - toggle #! / bin / sh LOG _ PREFIX = \" WiFi Auto - Toggle \" ETHERNET _ INTERFACE = \" Your _ Ethernet _ Interface \" if [ \" $ 1 \" = \" $ ETHERNET",
        "score": 0.9747890830039978
      },
      {
        "context_type": "resource",
        "indexed": true,
        "updatedAt": {
          "$date": "2025-07-01T08:25:30.385Z"
        },
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "content": "able to add and remove networks without a password ( which means you do not have to run a Polkit authentication agent, so this option will also work in SSH sessions ). Proxy settings NetworkManager does support some proxy settings. While they can not be directly modified using nmtui, nm - applet and nmcli support those. See the proxy settings in nm - settings - nmcli ( 5 ). Additionally, custom proxy commands can always be run using dispatcher scripts, see # Dispatcher examples. See also Proxy settings. Check",
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "override_policy": false,
        "_id": {
          "$oid": "68639b7a01ecb20c9725da4f"
        },
        "parent_context_nodes": [
          {
            "$oid": "68639b7a01ecb20c9725da4e"
          }
        ],
        "organization_id": null,
        "governing_policies": "inherit",
        "children_context_nodes": [
          {
            "$oid": "68639b7a01ecb20c9725da50"
          }
        ],
        "corresponding_vector_id": "5298236e5f2f4264ae3c2361ff6bf0ea",
        "telemetry_data": {},
        "createdAt": {
          "$date": "2025-07-01T08:25:30.385Z"
        },
        "text": "able to add and remove networks without a password ( which means you do not have to run a Polkit authentication agent, so this option will also work in SSH sessions ). Proxy settings NetworkManager does support some proxy settings. While they can not be directly modified using nmtui, nm - applet and nmcli support those. See the proxy settings in nm - settings - nmcli ( 5 ). Additionally, custom proxy commands can always be run using dispatcher scripts, see # Dispatcher examples. See also Proxy settings. Check",
        "score": 0.974634051322937
      },
      {
        "context_type": "resource",
        "indexed": true,
        "createdAt": {
          "$date": "2025-07-01T08:25:37.059Z"
        },
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "_id": {
          "$oid": "68639b8101ecb20c9725da65"
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:25:37.059Z"
        },
        "scopes": [
          "basic.internal"
        ],
        "corresponding_vector_id": "18b3e5685b8e43f3854bab749a06a258",
        "children_context_nodes": [
          {
            "$oid": "68639b8101ecb20c9725da66"
          }
        ],
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "telemetry_data": {},
        "content": "management NetworkManager's DNS management is described in the GNOME project's wiki page [UNK] Projects / NetworkManager / DNS. DNS caching and conditional forwarding NetworkManager has a plugin to enable DNS caching and conditional forwarding ( previously called \" split DNS \" in NetworkManager's documentation ) using dnsmasq or systemd - resolved. The advantages of this setup is that DNS lookups will be cached, shortening resolve times, and DNS lookups of VPN hosts will be routed to the relevant VPN '",
        "parent_context_nodes": [
          {
            "$oid": "68639b8001ecb20c9725da64"
          }
        ],
        "text": "management NetworkManager's DNS management is described in the GNOME project's wiki page [UNK] Projects / NetworkManager / DNS. DNS caching and conditional forwarding NetworkManager has a plugin to enable DNS caching and conditional forwarding ( previously called \" split DNS \" in NetworkManager's documentation ) using dnsmasq or systemd - resolved. The advantages of this setup is that DNS lookups will be cached, shortening resolve times, and DNS lookups of VPN hosts will be routed to the relevant VPN '",
        "score": 0.9736568927764893
      },
      {
        "context_type": "resource",
        "indexed": true,
        "updatedAt": {
          "$date": "2025-07-01T08:26:32.967Z"
        },
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "_id": {
          "$oid": "68639bb901ecb20c9725db1d"
        },
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "parent_context_nodes": [
          {
            "$oid": "68639bb801ecb20c9725db1c"
          }
        ],
        "content": "##ace - state :'managed') NetworkManager [ 1372 ] : < warn > [ 1643991888. 3838 ] device ( wlan0 ) : Activation : ( wifi ) asking for new secrets You can try deleting the connection profile and creating a new one : $ nmcli connection delete SSID $ nmcli device wifi connect SSID password password You can also try disabling MAC address randomization : / etc / NetworkManager / conf. d / wifi _ rand _ mac. conf [ device ] wifi. s",
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "children_context_nodes": [
          {
            "$oid": "68639bb901ecb20c9725db1e"
          }
        ],
        "corresponding_vector_id": "18810d3bd14646f9b9b53be0f3d8b3b9",
        "telemetry_data": {},
        "createdAt": {
          "$date": "2025-07-01T08:26:32.967Z"
        },
        "text": "##ace - state :'managed') NetworkManager [ 1372 ] : < warn > [ 1643991888. 3838 ] device ( wlan0 ) : Activation : ( wifi ) asking for new secrets You can try deleting the connection profile and creating a new one : $ nmcli connection delete SSID $ nmcli device wifi connect SSID password password You can also try disabling MAC address randomization : / etc / NetworkManager / conf. d / wifi _ rand _ mac. conf [ device ] wifi. s",
        "score": 0.9735980033874512
      },
      {
        "context_type": "resource",
        "parent_context_nodes": [
          {
            "$oid": "68639b9401ecb20c9725daa4"
          }
        ],
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "children_context_nodes": [
          {
            "$oid": "68639b9401ecb20c9725daa6"
          }
        ],
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "_id": {
          "$oid": "68639b9401ecb20c9725daa5"
        },
        "createdAt": {
          "$date": "2025-07-01T08:25:56.484Z"
        },
        "blob": null,
        "content": "NetworkManager / dispatcher. d / pre - down. d / 30 - smb. sh Mounting of NFS shares See NFS # Using a NetworkManager dispatcher. Use dispatcher to automatically toggle wireless depending on LAN cable being plugged in The idea is to only turn Wi - Fi on when the LAN cable is unplugged ( for example when detaching from a laptop dock ), and for Wi - Fi to be automatically disabled, once a LAN cable is plugged in again. Create the following dispatcher script [ 7 ], replacing Your _",
        "override_policy": false,
        "organization_id": null,
        "corresponding_vector_id": "a9ba8cd0ee6e47ac9fcf9e99f4ad1f8e",
        "updatedAt": {
          "$date": "2025-07-01T08:25:56.484Z"
        },
        "governing_policies": "inherit",
        "telemetry_data": {},
        "text": "NetworkManager / dispatcher. d / pre - down. d / 30 - smb. sh Mounting of NFS shares See NFS # Using a NetworkManager dispatcher. Use dispatcher to automatically toggle wireless depending on LAN cable being plugged in The idea is to only turn Wi - Fi on when the LAN cable is unplugged ( for example when detaching from a laptop dock ), and for Wi - Fi to be automatically disabled, once a LAN cable is plugged in again. Create the following dispatcher script [ 7 ], replacing Your _",
        "score": 0.9735435247421265
      },
      {
        "context_type": "resource",
        "content": "none ) ) If roaming is not important, the periodic scanning behavior can be disabled by locking the BSSID of the access point in the Wi - Fi connection profile. Unable to turn on Wi - Fi with Lenovo laptop ( IdeaPad, Legion, etc. ) There is an issue with the ideapad _ laptop module on some Lenovo models due to the Wi - Fi driver incorrectly reporting a soft block. The card can still be manipulated with netctl, but managers like NetworkManager break. You can verify that this is the",
        "indexed": true,
        "parent_context_nodes": [
          {
            "$oid": "68639bb301ecb20c9725db0c"
          }
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:26:28.094Z"
        },
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "override_policy": false,
        "_id": {
          "$oid": "68639bb401ecb20c9725db0d"
        },
        "organization_id": null,
        "governing_policies": "inherit",
        "children_context_nodes": [
          {
            "$oid": "68639bb401ecb20c9725db0e"
          }
        ],
        "telemetry_data": {},
        "corresponding_vector_id": "6daef71569344ddaac3b412cc8f4d9c9",
        "createdAt": {
          "$date": "2025-07-01T08:26:28.094Z"
        },
        "text": "none ) ) If roaming is not important, the periodic scanning behavior can be disabled by locking the BSSID of the access point in the Wi - Fi connection profile. Unable to turn on Wi - Fi with Lenovo laptop ( IdeaPad, Legion, etc. ) There is an issue with the ideapad _ laptop module on some Lenovo models due to the Wi - Fi driver incorrectly reporting a soft block. The card can still be manipulated with netctl, but managers like NetworkManager break. You can verify that this is the",
        "score": 0.9732053875923157
      },
      {
        "context_type": "resource",
        "indexed": true,
        "updatedAt": {
          "$date": "2025-07-01T08:26:27.787Z"
        },
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "parent_context_nodes": [
          {
            "$oid": "68639bb301ecb20c9725db0b"
          }
        ],
        "blob": null,
        "content": "root will indicate that this is taking place, messages like the following will be contained in the logs at regular intervals. NetworkManager [ 410 ] : < info > ( wlp3s0 ) : roamed from BSSID 00 : 14 : 48 : 11 : 20 : CF ( my - wifi - name ) to ( none ) ( ( none ) ) If roaming is not important, the periodic scanning behavior can be disabled by locking the BSSID of the access point in the Wi - Fi connection profile. Unable to turn on Wi - Fi with Lenovo",
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "_id": {
          "$oid": "68639bb301ecb20c9725db0c"
        },
        "children_context_nodes": [
          {
            "$oid": "68639bb401ecb20c9725db0d"
          }
        ],
        "telemetry_data": {},
        "corresponding_vector_id": "a2046aa07a33475d8292f24caaceed6a",
        "createdAt": {
          "$date": "2025-07-01T08:26:27.787Z"
        },
        "text": "root will indicate that this is taking place, messages like the following will be contained in the logs at regular intervals. NetworkManager [ 410 ] : < info > ( wlp3s0 ) : roamed from BSSID 00 : 14 : 48 : 11 : 20 : CF ( my - wifi - name ) to ( none ) ( ( none ) ) If roaming is not important, the periodic scanning behavior can be disabled by locking the BSSID of the access point in the Wi - Fi connection profile. Unable to turn on Wi - Fi with Lenovo",
        "score": 0.9731988310813904
      },
      {
        "context_type": "resource",
        "updatedAt": {
          "$date": "2025-07-01T08:26:15.301Z"
        },
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "parent_context_nodes": [
          {
            "$oid": "68639ba701ecb20c9725dae2"
          }
        ],
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "override_policy": false,
        "_id": {
          "$oid": "68639ba701ecb20c9725dae3"
        },
        "organization_id": null,
        "content": ". Randomization during Wi - Fi scanning is enabled by default, but it may be disabled by adding the following lines to / etc / NetworkManager / NetworkManager. conf or a dedicated configuration file under / etc / NetworkManager / conf. d : / etc / NetworkManager / conf. d / wifi _ rand _ mac. conf [ device ] wifi. scan - rand - mac - address = no MAC randomization for network connections can be set to different modes for both wireless and ethernet interfaces. See the GNOME",
        "governing_policies": "inherit",
        "corresponding_vector_id": "531d8772d7844543b06650758f7b10ed",
        "telemetry_data": {},
        "createdAt": {
          "$date": "2025-07-01T08:26:15.301Z"
        },
        "children_context_nodes": [
          {
            "$oid": "68639ba701ecb20c9725dae4"
          }
        ],
        "text": ". Randomization during Wi - Fi scanning is enabled by default, but it may be disabled by adding the following lines to / etc / NetworkManager / NetworkManager. conf or a dedicated configuration file under / etc / NetworkManager / conf. d : / etc / NetworkManager / conf. d / wifi _ rand _ mac. conf [ device ] wifi. scan - rand - mac - address = no MAC randomization for network connections can be set to different modes for both wireless and ethernet interfaces. See the GNOME",
        "score": 0.9684000015258789
      },
      {
        "context_type": "resource",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "children_context_nodes": [
          {
            "$oid": "68639ba801ecb20c9725dae7"
          }
        ],
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "_id": {
          "$oid": "68639ba801ecb20c9725dae6"
        },
        "parent_context_nodes": [
          {
            "$oid": "68639ba801ecb20c9725dae5"
          }
        ],
        "createdAt": {
          "$date": "2025-07-01T08:26:16.223Z"
        },
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "updatedAt": {
          "$date": "2025-07-01T08:26:16.223Z"
        },
        "governing_policies": "inherit",
        "content": "configuration under / etc / NetworkManager / conf. d : / etc / NetworkManager / conf. d / wifi _ rand _ mac. conf [ device - mac - randomization ] # \" yes \" is already the default for scanning wifi. scan - rand - mac - address = yes [ connection - mac - randomization ] # Randomize MAC for every ethernet connection ethernet. cloned - mac - address = random # Generate a random MAC for each Wi - Fi and associate the two permanently. wifi. clone",
        "telemetry_data": {},
        "corresponding_vector_id": "95ced85c1fdd4fe9aaad81ce33a2934e",
        "text": "configuration under / etc / NetworkManager / conf. d : / etc / NetworkManager / conf. d / wifi _ rand _ mac. conf [ device - mac - randomization ] # \" yes \" is already the default for scanning wifi. scan - rand - mac - address = yes [ connection - mac - randomization ] # Randomize MAC for every ethernet connection ethernet. cloned - mac - address = random # Generate a random MAC for each Wi - Fi and associate the two permanently. wifi. clone",
        "score": 0.9652048349380493
      },
      {
        "context_type": "resource",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "content": "- disable & For static IP addresses, you will have to configure NetworkManager to understand them. The process usually involves right - clicking the applet and selecting something like'Edit Connections '. Tips and tricks Encrypted Wi - Fi passwords By default, NetworkManager stores passwords in clear text in the connection files at / etc / NetworkManager / system - connections /. To print the stored passwords, use the following command : # grep - r'^ psk ='/ etc / NetworkMana",
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "corresponding_vector_id": "0dd87254099245c1bcbf8ef42031533f",
        "createdAt": {
          "$date": "2025-07-01T08:26:07.395Z"
        },
        "_id": {
          "$oid": "68639b9f01ecb20c9725dac9"
        },
        "telemetry_data": {},
        "children_context_nodes": [
          {
            "$oid": "68639b9f01ecb20c9725daca"
          }
        ],
        "parent_context_nodes": [
          {
            "$oid": "68639b9f01ecb20c9725dac8"
          }
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:26:07.395Z"
        },
        "text": "- disable & For static IP addresses, you will have to configure NetworkManager to understand them. The process usually involves right - clicking the applet and selecting something like'Edit Connections '. Tips and tricks Encrypted Wi - Fi passwords By default, NetworkManager stores passwords in clear text in the connection files at / etc / NetworkManager / system - connections /. To print the stored passwords, use the following command : # grep - r'^ psk ='/ etc / NetworkMana",
        "score": 0.9649439454078674
      },
      {
        "context_type": "resource",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "createdAt": {
          "$date": "2025-07-01T08:25:17.918Z"
        },
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "content": "##words ) are accessible to the root user in the filesystem and to users with access to settings via the GUI ( e. g. nm - applet ). see # Encrypted Wi - Fi passwords. Installation NetworkManager can be installed with the package networkmanager, which contains a daemon, a command line interface ( nmcli ) and a curses [UNK] based interface ( nmtui ). Enable NetworkManager After installation, you should start / enable NetworkManager. service. Once the NetworkManager daemon is started, it",
        "blob": null,
        "updatedAt": {
          "$date": "2025-07-01T08:25:17.918Z"
        },
        "override_policy": false,
        "organization_id": null,
        "_id": {
          "$oid": "68639b6e01ecb20c9725da26"
        },
        "children_context_nodes": [
          {
            "$oid": "68639b6e01ecb20c9725da27"
          }
        ],
        "governing_policies": "inherit",
        "parent_context_nodes": [
          {
            "$oid": "68639b6d01ecb20c9725da25"
          }
        ],
        "telemetry_data": {},
        "corresponding_vector_id": "4c5c0e01849e46fb865a4e9e00ffdbd7",
        "text": "##words ) are accessible to the root user in the filesystem and to users with access to settings via the GUI ( e. g. nm - applet ). see # Encrypted Wi - Fi passwords. Installation NetworkManager can be installed with the package networkmanager, which contains a daemon, a command line interface ( nmcli ) and a curses [UNK] based interface ( nmtui ). Enable NetworkManager After installation, you should start / enable NetworkManager. service. Once the NetworkManager daemon is started, it",
        "score": 0.9624823331832886
      },
      {
        "context_type": "resource",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "corresponding_vector_id": "32999bf245ce491aa933ab8d6a11b486",
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "createdAt": {
          "$date": "2025-07-01T08:25:41.599Z"
        },
        "governing_policies": "inherit",
        "parent_context_nodes": [
          {
            "$oid": "68639b8501ecb20c9725da73"
          }
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:25:41.599Z"
        },
        "content": "systemd - resolved DNS resolver with an openresolv subscriber If openresolv has a subscriber for your local DNS resolver, set up the subscriber and configure NetworkManager to use openresolv. Because NetworkManager advertises a single \" interface \" to resolvconf, it is not possible to implement conditional forwarding between two NetworkManager connections. See NetworkManager issue 153. This can be partially mitigated if you set private _ interfaces = \" * \" in / etc / resolvcon",
        "telemetry_data": {},
        "_id": {
          "$oid": "68639b8501ecb20c9725da74"
        },
        "children_context_nodes": [
          {
            "$oid": "68639b8601ecb20c9725da75"
          }
        ],
        "text": "systemd - resolved DNS resolver with an openresolv subscriber If openresolv has a subscriber for your local DNS resolver, set up the subscriber and configure NetworkManager to use openresolv. Because NetworkManager advertises a single \" interface \" to resolvconf, it is not possible to implement conditional forwarding between two NetworkManager connections. See NetworkManager issue 153. This can be partially mitigated if you set private _ interfaces = \" * \" in / etc / resolvcon",
        "score": 0.9535468220710754
      },
      {
        "context_type": "resource",
        "_id": {
          "$oid": "68639b8601ecb20c9725da78"
        },
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "content": ". 0. 0. 1 Note : If you use NetworkManager's dnsmasq or systemd - resolved plugin or openresolv subscribers, then do not specify loopback addresses with the servers = option, it can break DNS resolution. The specified servers do not get sent to systemd - resolved, the connection's DNS servers are used instead. See NetworkManager issue 1366 and systemd issue 33754. Setting custom DNS servers in a connection Setting custom DNS servers in a connection ( GUI ) Setup",
        "blob": null,
        "children_context_nodes": [
          {
            "$oid": "68639b8701ecb20c9725da79"
          }
        ],
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "createdAt": {
          "$date": "2025-07-01T08:25:42.811Z"
        },
        "corresponding_vector_id": "aacca108ee0e45609036205e0eca0303",
        "telemetry_data": {},
        "parent_context_nodes": [
          {
            "$oid": "68639b8601ecb20c9725da77"
          }
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:25:42.811Z"
        },
        "text": ". 0. 0. 1 Note : If you use NetworkManager's dnsmasq or systemd - resolved plugin or openresolv subscribers, then do not specify loopback addresses with the servers = option, it can break DNS resolution. The specified servers do not get sent to systemd - resolved, the connection's DNS servers are used instead. See NetworkManager issue 1366 and systemd issue 33754. Setting custom DNS servers in a connection Setting custom DNS servers in a connection ( GUI ) Setup",
        "score": 0.9530665874481201
      },
      {
        "context_type": "resource",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "children_context_nodes": [
          {
            "$oid": "68639b9701ecb20c9725daae"
          }
        ],
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "content": "thing to do is to create the dispatcher script that defines what to do after we are connected to the network. Note : This script will require wireless _ tools in order to use iwgetid. / etc / NetworkManager / dispatcher. d / vpn - up #! / bin / sh VPN _ NAME = \" name of VPN connection defined in NetworkManager \" ESSID = \" Wi - Fi network ESSID ( not connection name ) \" interface = $ 1 status = $ 2 case $ status in up | vpn - down ) if",
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "corresponding_vector_id": "d91c0f68ffd24b228ba79117c8e63e30",
        "parent_context_nodes": [
          {
            "$oid": "68639b9601ecb20c9725daac"
          }
        ],
        "_id": {
          "$oid": "68639b9701ecb20c9725daad"
        },
        "createdAt": {
          "$date": "2025-07-01T08:25:58.897Z"
        },
        "telemetry_data": {},
        "updatedAt": {
          "$date": "2025-07-01T08:25:58.897Z"
        },
        "text": "thing to do is to create the dispatcher script that defines what to do after we are connected to the network. Note : This script will require wireless _ tools in order to use iwgetid. / etc / NetworkManager / dispatcher. d / vpn - up #! / bin / sh VPN _ NAME = \" name of VPN connection defined in NetworkManager \" ESSID = \" Wi - Fi network ESSID ( not connection name ) \" interface = $ 1 status = $ 2 case $ status in up | vpn - down ) if",
        "score": 0.9485477209091187
      },
      {
        "context_type": "resource",
        "corresponding_vector_id": "7a0820848c8948ac9f2c0636038f4a8b",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "children_context_nodes": [
          {
            "$oid": "68639ba701ecb20c9725dae3"
          }
        ],
        "_id": {
          "$oid": "68639ba701ecb20c9725dae2"
        },
        "parent_context_nodes": [
          {
            "$oid": "68639ba601ecb20c9725dae1"
          }
        ],
        "blob": null,
        "createdAt": {
          "$date": "2025-07-01T08:26:14.997Z"
        },
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "updatedAt": {
          "$date": "2025-07-01T08:26:14.997Z"
        },
        "telemetry_data": {},
        "content": "##canning, and for network connections. Both modes can be configured by modifying / etc / NetworkManager / NetworkManager. conf or by creating a separate configuration file in / etc / NetworkManager / conf. d / which is recommended since the aforementioned configuration file may be overwritten by NetworkManager. Randomization during Wi - Fi scanning is enabled by default, but it may be disabled by adding the following lines to / etc / NetworkManager / NetworkManager. conf or a dedicated configuration file under / etc /",
        "text": "##canning, and for network connections. Both modes can be configured by modifying / etc / NetworkManager / NetworkManager. conf or by creating a separate configuration file in / etc / NetworkManager / conf. d / which is recommended since the aforementioned configuration file may be overwritten by NetworkManager. Randomization during Wi - Fi scanning is enabled by default, but it may be disabled by adding the following lines to / etc / NetworkManager / NetworkManager. conf or a dedicated configuration file under / etc /",
        "score": 0.9447650909423828
      },
      {
        "context_type": "resource",
        "updatedAt": {
          "$date": "2025-07-01T08:25:40.388Z"
        },
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "content": "be to disable IPv4 DNS in the NetworkManager config, assuming one exists. DNSSEC The dnsmasq instance started by NetworkManager by default will not validate DNSSEC. To enable DNSSEC validation, thus breaking DNS resolution with name servers that do not support it, create the following configuration file : / etc / NetworkManager / dnsmasq. d / dnssec. conf conf - file = / usr / share / dnsmasq / trust - anchors. conf dnssec",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "corresponding_vector_id": "ac979b257f01413083208b95ed7d34e2",
        "parent_context_nodes": [
          {
            "$oid": "68639b8401ecb20c9725da6f"
          }
        ],
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "children_context_nodes": [
          {
            "$oid": "68639b8401ecb20c9725da71"
          }
        ],
        "governing_policies": "inherit",
        "createdAt": {
          "$date": "2025-07-01T08:25:40.388Z"
        },
        "telemetry_data": {},
        "_id": {
          "$oid": "68639b8401ecb20c9725da70"
        },
        "text": "be to disable IPv4 DNS in the NetworkManager config, assuming one exists. DNSSEC The dnsmasq instance started by NetworkManager by default will not validate DNSSEC. To enable DNSSEC validation, thus breaking DNS resolution with name servers that do not support it, create the following configuration file : / etc / NetworkManager / dnsmasq. d / dnssec. conf conf - file = / usr / share / dnsmasq / trust - anchors. conf dnssec",
        "score": 0.9413920640945435
      },
      {
        "context_type": "resource",
        "createdAt": {
          "$date": "2025-07-01T08:25:50.416Z"
        },
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "corresponding_vector_id": "f68ab770dca64bfd9240fd5f9e84fec1",
        "indexable": true,
        "updatedAt": {
          "$date": "2025-07-01T08:25:50.416Z"
        },
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "_id": {
          "$oid": "68639b8e01ecb20c9725da91"
        },
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "parent_context_nodes": [
          {
            "$oid": "68639b8e01ecb20c9725da90"
          }
        ],
        "content": "##cker for more information ). If the timeout still creates the problem, a work around may be to use a drop - in file for the NetworkManager - dispatcher. service to remain active after exit : / etc / systemd / system / NetworkManager - dispatcher. service. d / remain _ after _ exit. conf [ Service ] RemainAfterExit = yes Now start and enable the modified NetworkManager - dispatcher service. Warning : Adding the RemainAfterExit line to it will prevent the dispatcher from closing.",
        "children_context_nodes": [
          {
            "$oid": "68639b8e01ecb20c9725da92"
          }
        ],
        "telemetry_data": {},
        "text": "##cker for more information ). If the timeout still creates the problem, a work around may be to use a drop - in file for the NetworkManager - dispatcher. service to remain active after exit : / etc / systemd / system / NetworkManager - dispatcher. service. d / remain _ after _ exit. conf [ Service ] RemainAfterExit = yes Now start and enable the modified NetworkManager - dispatcher service. Warning : Adding the RemainAfterExit line to it will prevent the dispatcher from closing.",
        "score": 0.9358273148536682
      },
      {
        "context_type": "resource",
        "content": "NetworkManager from touching / etc / resolv. conf, set main. dns = none with a configuration file in / etc / NetworkManager / conf. d / : / etc / NetworkManager / conf. d / dns. conf [ main ] dns = none Tip : You might also want to set main. systemd - resolved = false, so that NetworkManager does not send the DNS configuration to systemd - resolved. Note : See # DNS caching and conditional forwarding, to configure NetworkManager using other",
        "parent_context_nodes": [
          {
            "$oid": "68639b8a01ecb20c9725da83"
          }
        ],
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "children_context_nodes": [
          {
            "$oid": "68639b8a01ecb20c9725da85"
          }
        ],
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "corresponding_vector_id": "5496c30a83784f5dbda43e54b72beab9",
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "createdAt": {
          "$date": "2025-07-01T08:25:46.459Z"
        },
        "governing_policies": "inherit",
        "updatedAt": {
          "$date": "2025-07-01T08:25:46.459Z"
        },
        "telemetry_data": {},
        "_id": {
          "$oid": "68639b8a01ecb20c9725da84"
        },
        "text": "NetworkManager from touching / etc / resolv. conf, set main. dns = none with a configuration file in / etc / NetworkManager / conf. d / : / etc / NetworkManager / conf. d / dns. conf [ main ] dns = none Tip : You might also want to set main. systemd - resolved = false, so that NetworkManager does not send the DNS configuration to systemd - resolved. Note : See # DNS caching and conditional forwarding, to configure NetworkManager using other",
        "score": 0.9273409247398376
      },
      {
        "context_type": "resource",
        "content": "( nmcli ) and a curses [UNK] based interface ( nmtui ). Enable NetworkManager After installation, you should start / enable NetworkManager. service. Once the NetworkManager daemon is started, it will automatically connect to any available \" system connections \" that have already been configured. Any \" user connections \" or unconfigured connections will need nmcli or an applet to configure and connect. Note : Each network interface should be managed by only one DHCP client or network manager, so it is advised to run only one DHCP client or",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "createdAt": {
          "$date": "2025-07-01T08:25:18.225Z"
        },
        "_id": {
          "$oid": "68639b6e01ecb20c9725da27"
        },
        "source": "*",
        "corresponding_vector_id": "4f0b9b18083b4ee9abb4db31c4a991d7",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:25:18.225Z"
        },
        "blob": null,
        "override_policy": false,
        "children_context_nodes": [
          {
            "$oid": "68639b6e01ecb20c9725da28"
          }
        ],
        "organization_id": null,
        "governing_policies": "inherit",
        "parent_context_nodes": [
          {
            "$oid": "68639b6e01ecb20c9725da26"
          }
        ],
        "telemetry_data": {},
        "text": "( nmcli ) and a curses [UNK] based interface ( nmtui ). Enable NetworkManager After installation, you should start / enable NetworkManager. service. Once the NetworkManager daemon is started, it will automatically connect to any available \" system connections \" that have already been configured. Any \" user connections \" or unconfigured connections will need nmcli or an applet to configure and connect. Note : Each network interface should be managed by only one DHCP client or network manager, so it is advised to run only one DHCP client or",
        "score": 0.9260110259056091
      },
      {
        "context_type": "resource",
        "createdAt": {
          "$date": "2025-07-01T08:25:45.246Z"
        },
        "parent_context_nodes": [
          {
            "$oid": "68639b8901ecb20c9725da7f"
          }
        ],
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "updatedAt": {
          "$date": "2025-07-01T08:25:45.246Z"
        },
        "children_context_nodes": [
          {
            "$oid": "68639b8901ecb20c9725da81"
          }
        ],
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "corresponding_vector_id": "45dcdfb8416d45549179856c3cb736b2",
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "_id": {
          "$oid": "68639b8901ecb20c9725da80"
        },
        "telemetry_data": {},
        "content": "upstream default auto. The setting and its values are documented in the NetworkManager. conf ( 5 ) man page. Tip : Using openresolv allows NetworkManager to coexist with other resolvconf supporting software or, for example, to run a local DNS caching and split - DNS resolver for which openresolv has a subscriber. Note that conditional forwarding is not yet fully supported when using NetworkManager with openresolv. NetworkManager also offers hooks via so called dispatcher scripts that can be used to",
        "text": "upstream default auto. The setting and its values are documented in the NetworkManager. conf ( 5 ) man page. Tip : Using openresolv allows NetworkManager to coexist with other resolvconf supporting software or, for example, to run a local DNS caching and split - DNS resolver for which openresolv has a subscriber. Note that conditional forwarding is not yet fully supported when using NetworkManager with openresolv. NetworkManager also offers hooks via so called dispatcher scripts that can be used to",
        "score": 0.9084665775299072
      },
      {
        "context_type": "resource",
        "_id": {
          "$oid": "68639bb401ecb20c9725db0e"
        },
        "updatedAt": {
          "$date": "2025-07-01T08:26:28.396Z"
        },
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "parent_context_nodes": [
          {
            "$oid": "68639bb401ecb20c9725db0d"
          }
        ],
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "override_policy": false,
        "content": "some Lenovo models due to the Wi - Fi driver incorrectly reporting a soft block. The card can still be manipulated with netctl, but managers like NetworkManager break. You can verify that this is the problem by checking the output of rfkill list after toggling your hardware switch and seeing that the soft block persists. Unloading the ideapad _ laptop module should fix this. ( warning : this may disable the laptop keyboard and touchpad also! ). Turn off hostname sending NetworkManager by default sends the hostname",
        "organization_id": null,
        "governing_policies": "inherit",
        "corresponding_vector_id": "6bdfc9a83933407aaea6d3b486310d64",
        "telemetry_data": {},
        "createdAt": {
          "$date": "2025-07-01T08:26:28.396Z"
        },
        "children_context_nodes": [
          {
            "$oid": "68639bb401ecb20c9725db0f"
          }
        ],
        "text": "some Lenovo models due to the Wi - Fi driver incorrectly reporting a soft block. The card can still be manipulated with netctl, but managers like NetworkManager break. You can verify that this is the problem by checking the output of rfkill list after toggling your hardware switch and seeing that the soft block persists. Unloading the ideapad _ laptop module should fix this. ( warning : this may disable the laptop keyboard and touchpad also! ). Turn off hostname sending NetworkManager by default sends the hostname",
        "score": 0.9004733562469482
      },
      {
        "context_type": "resource",
        "_id": {
          "$oid": "68639bb201ecb20c9725db06"
        },
        "indexed": true,
        "corresponding_vector_id": "d5be58e5c35c4b478636ab802d24b208",
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "createdAt": {
          "$date": "2025-07-01T08:26:25.962Z"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:26:25.962Z"
        },
        "blob": null,
        "content": ": ln - s / usr / lib / networkmanager / nm - vpnc - auth - dialog / usr / lib / gnome - shell / This may need to be done for any other NetworkManager VPN plugins as well, but these are the two most common. Unable to connect to visible European wireless networks WLAN chips are shipped with a default regulatory domain. If your access point does not operate within these limitations, you will not be able to connect to the network. Fixing this is easy : Install wireless - regd",
        "override_policy": false,
        "parent_context_nodes": [
          {
            "$oid": "68639bb101ecb20c9725db05"
          }
        ],
        "organization_id": null,
        "children_context_nodes": [
          {
            "$oid": "68639bb201ecb20c9725db07"
          }
        ],
        "governing_policies": "inherit",
        "telemetry_data": {},
        "text": ": ln - s / usr / lib / networkmanager / nm - vpnc - auth - dialog / usr / lib / gnome - shell / This may need to be done for any other NetworkManager VPN plugins as well, but these are the two most common. Unable to connect to visible European wireless networks WLAN chips are shipped with a default regulatory domain. If your access point does not operate within these limitations, you will not be able to connect to the network. Fixing this is easy : Install wireless - regd",
        "score": 0.871661901473999
      },
      {
        "context_type": "resource",
        "updatedAt": {
          "$date": "2025-07-01T08:26:33.880Z"
        },
        "indexed": true,
        "corresponding_vector_id": "765583b2f1614e38bd0763421b24df6f",
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "_id": {
          "$oid": "68639bba01ecb20c9725db20"
        },
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "override_policy": false,
        "parent_context_nodes": [
          {
            "$oid": "68639bb901ecb20c9725db1f"
          }
        ],
        "organization_id": null,
        "governing_policies": "inherit",
        "children_context_nodes": [
          {
            "$oid": "68639bba01ecb20c9725db21"
          }
        ],
        "createdAt": {
          "$date": "2025-07-01T08:26:33.880Z"
        },
        "telemetry_data": {},
        "content": "can not configure a WPA Enterprise network. Therefore you have to configure it using an iwd configuration file / var / lib / iwd / essid. 8021x like described in iwd # WPA Enterprise. Failed to request VPN secrets If you get this error : Failed to request VPN secrets # 1 : No agents were available for this request. It is either because the password is empty or you have to set up PolicyKit permissions. OpenVPN connections fail with \" secrets : failed to request VPN secrets \" warn The package networkmanager",
        "text": "can not configure a WPA Enterprise network. Therefore you have to configure it using an iwd configuration file / var / lib / iwd / essid. 8021x like described in iwd # WPA Enterprise. Failed to request VPN secrets If you get this error : Failed to request VPN secrets # 1 : No agents were available for this request. It is either because the password is empty or you have to set up PolicyKit permissions. OpenVPN connections fail with \" secrets : failed to request VPN secrets \" warn The package networkmanager",
        "score": 0.8610451221466064
      },
      {
        "context_type": "resource",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "corresponding_vector_id": "ad030be99da1463995030451c171949d",
        "governing_policies": "inherit",
        "parent_context_nodes": [
          {
            "$oid": "68639bb201ecb20c9725db06"
          }
        ],
        "children_context_nodes": [
          {
            "$oid": "68639bb201ecb20c9725db08"
          }
        ],
        "createdAt": {
          "$date": "2025-07-01T08:26:26.264Z"
        },
        "telemetry_data": {},
        "_id": {
          "$oid": "68639bb201ecb20c9725db07"
        },
        "content": "WLAN chips are shipped with a default regulatory domain. If your access point does not operate within these limitations, you will not be able to connect to the network. Fixing this is easy : Install wireless - regdb. Uncomment the correct country code in / etc / conf. d / wireless - regdom. Reboot the system, because the setting is only read on boot. Automatic connect to VPN on boot is not working The problem occurs when the system ( i. e. NetworkManager running as the root user ) tries to establish a VPN connection",
        "updatedAt": {
          "$date": "2025-07-01T08:26:26.264Z"
        },
        "text": "WLAN chips are shipped with a default regulatory domain. If your access point does not operate within these limitations, you will not be able to connect to the network. Fixing this is easy : Install wireless - regdb. Uncomment the correct country code in / etc / conf. d / wireless - regdom. Reboot the system, because the setting is only read on boot. Automatic connect to VPN on boot is not working The problem occurs when the system ( i. e. NetworkManager running as the root user ) tries to establish a VPN connection",
        "score": 0.8592080473899841
      },
      {
        "context_type": "resource",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "corresponding_vector_id": "f4d0e41b943f40e5a7c7cdaa287455a9",
        "indexable": true,
        "parent_context_nodes": [
          {
            "$oid": "68639bb701ecb20c9725db18"
          }
        ],
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "content": "no - daemon \" ) This is because NetworkManager will try to send DNS information to systemd - resolved regardless of the main. dns = setting in NetworkManager. conf ( 5 ). [ 10 ] This can be disabled with a configuration file in / etc / NetworkManager / conf. d / : / etc / NetworkManager / conf. d / no - systemd - resolved. conf [ main ] systemd - resolved = false See FS # 62138. Secrets were required, but not provided If you received the following error when attempting to connect",
        "children_context_nodes": [
          {
            "$oid": "68639bb801ecb20c9725db1a"
          }
        ],
        "createdAt": {
          "$date": "2025-07-01T08:26:31.741Z"
        },
        "governing_policies": "inherit",
        "telemetry_data": {},
        "updatedAt": {
          "$date": "2025-07-01T08:26:31.741Z"
        },
        "_id": {
          "$oid": "68639bb701ecb20c9725db19"
        },
        "text": "no - daemon \" ) This is because NetworkManager will try to send DNS information to systemd - resolved regardless of the main. dns = setting in NetworkManager. conf ( 5 ). [ 10 ] This can be disabled with a configuration file in / etc / NetworkManager / conf. d / : / etc / NetworkManager / conf. d / no - systemd - resolved. conf [ main ] systemd - resolved = false See FS # 62138. Secrets were required, but not provided If you received the following error when attempting to connect",
        "score": 0.8389989137649536
      },
      {
        "context_type": "resource",
        "indexed": true,
        "parent_context_nodes": [
          {
            "$oid": "68639b7601ecb20c9725da42"
          }
        ],
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "createdAt": {
          "$date": "2025-07-01T08:25:26.725Z"
        },
        "children_context_nodes": [
          {
            "$oid": "68639b7701ecb20c9725da44"
          }
        ],
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:25:26.725Z"
        },
        "content": "package. To use nm - applet in an Appindicator environment start the applet with the following command : $ nm - applet - - indicator networkmanager - dmenu Alternatively there is networkmanager - dmenu - gitAUR which is a small script to manage NetworkManager connections with dmenu or rofi instead of nm - applet. It provides all essential features such as connection to existing NetworkManager Wi - Fi or wired connections, connect to new Wi - Fi connections, requests passphrase if required, connect to existing VPN connections, enable",
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "corresponding_vector_id": "ca46cab956354cb291aea9f41117f1ee",
        "_id": {
          "$oid": "68639b7601ecb20c9725da43"
        },
        "telemetry_data": {},
        "text": "package. To use nm - applet in an Appindicator environment start the applet with the following command : $ nm - applet - - indicator networkmanager - dmenu Alternatively there is networkmanager - dmenu - gitAUR which is a small script to manage NetworkManager connections with dmenu or rofi instead of nm - applet. It provides all essential features such as connection to existing NetworkManager Wi - Fi or wired connections, connect to new Wi - Fi connections, requests passphrase if required, connect to existing VPN connections, enable",
        "score": 0.827885627746582
      },
      {
        "context_type": "resource",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "corresponding_vector_id": "99c2e6e6fe594a4184ed3e1222fb4f67",
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "_id": {
          "$oid": "68639ba601ecb20c9725dae1"
        },
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "children_context_nodes": [
          {
            "$oid": "68639ba701ecb20c9725dae2"
          }
        ],
        "createdAt": {
          "$date": "2025-07-01T08:26:14.693Z"
        },
        "telemetry_data": {},
        "content": "randomization may be needed to get ( stable ) link connection [ 9 ] and / or networks that restrict devices based on their MAC Address or have a limit network capacity. MAC randomization can be used for increased privacy by not disclosing your real MAC address to the network. NetworkManager supports two types MAC Address Randomization : randomization during scanning, and for network connections. Both modes can be configured by modifying / etc / NetworkManager / NetworkManager. conf or by creating a separate configuration file in / etc / NetworkManager / con",
        "parent_context_nodes": [
          {
            "$oid": "68639ba601ecb20c9725dae0"
          }
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:26:14.693Z"
        },
        "text": "randomization may be needed to get ( stable ) link connection [ 9 ] and / or networks that restrict devices based on their MAC Address or have a limit network capacity. MAC randomization can be used for increased privacy by not disclosing your real MAC address to the network. NetworkManager supports two types MAC Address Randomization : randomization during scanning, and for network connections. Both modes can be configured by modifying / etc / NetworkManager / NetworkManager. conf or by creating a separate configuration file in / etc / NetworkManager / con",
        "score": 0.8088402152061462
      },
      {
        "context_type": "resource",
        "indexed": true,
        "createdAt": {
          "$date": "2025-07-01T08:26:21.394Z"
        },
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "corresponding_vector_id": "5051b93f1ab542cf97d319b7500f92bb",
        "source": "*",
        "indexable": true,
        "_id": {
          "$oid": "68639bad01ecb20c9725daf7"
        },
        "tags": [
          "default",
          "sample"
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:26:21.394Z"
        },
        "scopes": [
          "basic.internal"
        ],
        "children_context_nodes": [
          {
            "$oid": "68639bad01ecb20c9725daf8"
          }
        ],
        "blob": null,
        "override_policy": false,
        "parent_context_nodes": [
          {
            "$oid": "68639bad01ecb20c9725daf6"
          }
        ],
        "organization_id": null,
        "governing_policies": "inherit",
        "telemetry_data": {},
        "content": "values connection. uuid connection show name - of - VPN - connection ) # nmcli connection modify name - of - Internet - connection connection. secondaries \" $ UUID \" Now when NetworkManager is restarted and you connect to the Internet connection you have configured, you should automatically get connected to the VPN. Troubleshooting No prompt for password of secured Wi - Fi networks When trying to connect to a secured Wi - Fi network, no prompt for a password is shown and no connection is established. This happens when no keyring package is installed.",
        "text": "values connection. uuid connection show name - of - VPN - connection ) # nmcli connection modify name - of - Internet - connection connection. secondaries \" $ UUID \" Now when NetworkManager is restarted and you connect to the Internet connection you have configured, you should automatically get connected to the VPN. Troubleshooting No prompt for password of secured Wi - Fi networks When trying to connect to a secured Wi - Fi network, no prompt for a password is shown and no connection is established. This happens when no keyring package is installed.",
        "score": 0.8062692284584045
      },
      {
        "context_type": "resource",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "override_policy": false,
        "_id": {
          "$oid": "68639b9b01ecb20c9725dabd"
        },
        "organization_id": null,
        "governing_policies": "inherit",
        "children_context_nodes": [
          {
            "$oid": "68639b9c01ecb20c9725dabe"
          }
        ],
        "createdAt": {
          "$date": "2025-07-01T08:26:03.760Z"
        },
        "parent_context_nodes": [
          {
            "$oid": "68639b9b01ecb20c9725dabc"
          }
        ],
        "content": "vpn - down ) nmcli device reapply \" $ { DEVICE _ IFACE } \" ; ; esac OpenNTPD See OpenNTPD # Using NetworkManager dispatcher. Dynamically set NTP servers received via DHCP with systemd - timesyncd When roaming between different networks ( e. g. a company's LAN, Wi - Fi at home, various other Wi - Fi now and then ) you might want to set the NTP server ( s ) used by timesyncd to those provided by DHCP. However, Network",
        "telemetry_data": {},
        "updatedAt": {
          "$date": "2025-07-01T08:26:03.760Z"
        },
        "corresponding_vector_id": "e0304a5f3f3844ad81b0504f935b8287",
        "text": "vpn - down ) nmcli device reapply \" $ { DEVICE _ IFACE } \" ; ; esac OpenNTPD See OpenNTPD # Using NetworkManager dispatcher. Dynamically set NTP servers received via DHCP with systemd - timesyncd When roaming between different networks ( e. g. a company's LAN, Wi - Fi at home, various other Wi - Fi now and then ) you might want to set the NTP server ( s ) used by timesyncd to those provided by DHCP. However, Network",
        "score": 0.7857438921928406
      },
      {
        "context_type": "resource",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "createdAt": {
          "$date": "2025-07-01T08:25:38.874Z"
        },
        "indexable": true,
        "corresponding_vector_id": "5b671a999b3f462eb520de5445b5bd03",
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "parent_context_nodes": [
          {
            "$oid": "68639b8201ecb20c9725da6a"
          }
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:25:38.874Z"
        },
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "_id": {
          "$oid": "68639b8301ecb20c9725da6b"
        },
        "governing_policies": "inherit",
        "content": "##nsmasq. conf. NetworkManager will start dnsmasq without using the systemd service and without reading the dnsmasq's default configuration file ( s ). The dnsmasq instance started by NetworkManager will bind to 127. 0. 0. 1 : 53, you cannot run any other software ( including dnsmasq. service ) on the same address and port. Custom dnsmasq configuration Custom configurations can be created for dnsmasq by creating configuration files in / etc / NetworkManager / dnsmasq. d /.",
        "children_context_nodes": [
          {
            "$oid": "68639b8301ecb20c9725da6c"
          }
        ],
        "telemetry_data": {},
        "text": "##nsmasq. conf. NetworkManager will start dnsmasq without using the systemd service and without reading the dnsmasq's default configuration file ( s ). The dnsmasq instance started by NetworkManager will bind to 127. 0. 0. 1 : 53, you cannot run any other software ( including dnsmasq. service ) on the same address and port. Custom dnsmasq configuration Custom configurations can be created for dnsmasq by creating configuration files in / etc / NetworkManager / dnsmasq. d /.",
        "score": 0.7765480875968933
      },
      {
        "context_type": "resource",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "corresponding_vector_id": "34f19e8a764a47e48d23e4ce45ed7125",
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "createdAt": {
          "$date": "2025-07-01T08:25:46.761Z"
        },
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "updatedAt": {
          "$date": "2025-07-01T08:25:46.761Z"
        },
        "governing_policies": "inherit",
        "content": "main. systemd - resolved = false, so that NetworkManager does not send the DNS configuration to systemd - resolved. Note : See # DNS caching and conditional forwarding, to configure NetworkManager using other DNS backends like dnsmasq and systemd - resolved, instead of using main. dns = none. After that / etc / resolv. conf might be a broken symlink that you will need to remove. Then, just create a new / etc / resolv. conf file. Use openresolv Note : NetworkMana",
        "_id": {
          "$oid": "68639b8a01ecb20c9725da85"
        },
        "telemetry_data": {},
        "parent_context_nodes": [
          {
            "$oid": "68639b8a01ecb20c9725da84"
          }
        ],
        "children_context_nodes": [
          {
            "$oid": "68639b8b01ecb20c9725da86"
          }
        ],
        "text": "main. systemd - resolved = false, so that NetworkManager does not send the DNS configuration to systemd - resolved. Note : See # DNS caching and conditional forwarding, to configure NetworkManager using other DNS backends like dnsmasq and systemd - resolved, instead of using main. dns = none. After that / etc / resolv. conf might be a broken symlink that you will need to remove. Then, just create a new / etc / resolv. conf file. Use openresolv Note : NetworkMana",
        "score": 0.7728394269943237
      },
      {
        "context_type": "resource",
        "updatedAt": {
          "$date": "2025-07-01T08:26:27.180Z"
        },
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "corresponding_vector_id": "eef1e44d3da942a78925eab6fa12a4fe",
        "blob": null,
        "_id": {
          "$oid": "68639bb301ecb20c9725db0a"
        },
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "parent_context_nodes": [
          {
            "$oid": "68639bb301ecb20c9725db09"
          }
        ],
        "telemetry_data": {},
        "createdAt": {
          "$date": "2025-07-01T08:26:27.180Z"
        },
        "content": "connect VPN \" option from the nm - applet GUI. Systemd Bottleneck Over time the log files ( / var / log / journal ) can become very large. This can have a big impact on boot performance when using NetworkManager, see : Systemd # Boot time increasing over time. Regular network disconnects, latency and lost packets ( Wi - Fi ) NetworkManager does a scan every 2 minutes. Some Wi - Fi drivers have issues when scanning for base stations whilst connected / associated. Symptoms include VPN disconnects / reconnect",
        "children_context_nodes": [
          {
            "$oid": "68639bb301ecb20c9725db0b"
          }
        ],
        "text": "connect VPN \" option from the nm - applet GUI. Systemd Bottleneck Over time the log files ( / var / log / journal ) can become very large. This can have a big impact on boot performance when using NetworkManager, see : Systemd # Boot time increasing over time. Regular network disconnects, latency and lost packets ( Wi - Fi ) NetworkManager does a scan every 2 minutes. Some Wi - Fi drivers have issues when scanning for base stations whilst connected / associated. Symptoms include VPN disconnects / reconnect",
        "score": 0.7697152495384216
      },
      {
        "context_type": "resource",
        "indexed": true,
        "_id": {
          "$oid": "68639ba801ecb20c9725dae5"
        },
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "parent_context_nodes": [
          {
            "$oid": "68639ba701ecb20c9725dae4"
          }
        ],
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "createdAt": {
          "$date": "2025-07-01T08:26:15.917Z"
        },
        "blob": null,
        "override_policy": false,
        "updatedAt": {
          "$date": "2025-07-01T08:26:15.917Z"
        },
        "children_context_nodes": [
          {
            "$oid": "68639ba801ecb20c9725dae6"
          }
        ],
        "organization_id": null,
        "governing_policies": "inherit",
        "telemetry_data": {},
        "content": "stable generates a random MAC address when you connect to a new network and associates the two permanently. This means that you will use the same MAC address every time you connect to that network. In contrast, random will generate a new MAC address every time you connect to a network, new or previously known. You can configure the MAC randomization by adding the desired configuration under / etc / NetworkManager / conf. d : / etc / NetworkManager / conf. d / wifi _ rand _ mac. conf [ device - mac - randomization ] # \" yes \"",
        "corresponding_vector_id": "5e995220da89479298ec36c3f4b03073",
        "text": "stable generates a random MAC address when you connect to a new network and associates the two permanently. This means that you will use the same MAC address every time you connect to that network. In contrast, random will generate a new MAC address every time you connect to a network, new or previously known. You can configure the MAC randomization by adding the desired configuration under / etc / NetworkManager / conf. d : / etc / NetworkManager / conf. d / wifi _ rand _ mac. conf [ device - mac - randomization ] # \" yes \"",
        "score": 0.7641109824180603
      },
      {
        "context_type": "resource",
        "updatedAt": {
          "$date": "2025-07-01T08:26:21.694Z"
        },
        "indexed": true,
        "corresponding_vector_id": "887e24edceac4a3591c9ca0fe7e2c80e",
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "children_context_nodes": [
          {
            "$oid": "68639bae01ecb20c9725daf9"
          }
        ],
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "content": "##ing No prompt for password of secured Wi - Fi networks When trying to connect to a secured Wi - Fi network, no prompt for a password is shown and no connection is established. This happens when no keyring package is installed. An easy solution is to install gnome - keyring. If you want the passwords to be stored in encrypted form, follow GNOME Keyring to set up the gnome - keyring - daemon. Network management disabled When NetworkManager shuts down but the pid ( state ) file is not removed, you will see",
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "_id": {
          "$oid": "68639bad01ecb20c9725daf8"
        },
        "createdAt": {
          "$date": "2025-07-01T08:26:21.694Z"
        },
        "telemetry_data": {},
        "parent_context_nodes": [
          {
            "$oid": "68639bad01ecb20c9725daf7"
          }
        ],
        "text": "##ing No prompt for password of secured Wi - Fi networks When trying to connect to a secured Wi - Fi network, no prompt for a password is shown and no connection is established. This happens when no keyring package is installed. An easy solution is to install gnome - keyring. If you want the passwords to be stored in encrypted form, follow GNOME Keyring to set up the gnome - keyring - daemon. Network management disabled When NetworkManager shuts down but the pid ( state ) file is not removed, you will see",
        "score": 0.7455542683601379
      },
      {
        "context_type": "resource",
        "parent_context_nodes": [
          {
            "$oid": "68639b6e01ecb20c9725da28"
          }
        ],
        "corresponding_vector_id": "9bcb5bf13a3744c9bc1ab6711ccc0553",
        "indexed": true,
        "_id": {
          "$oid": "68639b6f01ecb20c9725da29"
        },
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "createdAt": {
          "$date": "2025-07-01T08:25:18.831Z"
        },
        "content": "stop or reconfigure those that conflict. If systemd - resolved is not started, an error message will start flooding your logs. See # Unit dbus - org. freedesktop. resolve1. service not found for more info. Additional interfaces nm - connection - editor for a graphical user interface, network - manager - applet for a system tray applet ( nm - applet ). Mobile broadband support NetworkManager uses ModemManager for mobile broadband connection support. Install modemmanager and usb _ modeswitch. Afterwards enable and start",
        "blob": null,
        "override_policy": false,
        "updatedAt": {
          "$date": "2025-07-01T08:25:18.831Z"
        },
        "organization_id": null,
        "governing_policies": "inherit",
        "children_context_nodes": [
          {
            "$oid": "68639b6f01ecb20c9725da2a"
          }
        ],
        "telemetry_data": {},
        "text": "stop or reconfigure those that conflict. If systemd - resolved is not started, an error message will start flooding your logs. See # Unit dbus - org. freedesktop. resolve1. service not found for more info. Additional interfaces nm - connection - editor for a graphical user interface, network - manager - applet for a system tray applet ( nm - applet ). Mobile broadband support NetworkManager uses ModemManager for mobile broadband connection support. Install modemmanager and usb _ modeswitch. Afterwards enable and start",
        "score": 0.7341047525405884
      },
      {
        "context_type": "resource",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "createdAt": {
          "$date": "2025-07-01T08:26:18.359Z"
        },
        "blob": null,
        "parent_context_nodes": [
          {
            "$oid": "68639baa01ecb20c9725daec"
          }
        ],
        "override_policy": false,
        "corresponding_vector_id": "a2ed6b026369439683d7b3c737491514",
        "organization_id": null,
        "updatedAt": {
          "$date": "2025-07-01T08:26:18.359Z"
        },
        "governing_policies": "inherit",
        "children_context_nodes": [
          {
            "$oid": "68639baa01ecb20c9725daee"
          }
        ],
        "_id": {
          "$oid": "68639baa01ecb20c9725daed"
        },
        "telemetry_data": {},
        "content": "##uid The stable - ll and stable - llt values are also supported. For further information read the description for dhcp - duid in nm - settings ( 5 ) § ipv6 setting. Working with wired connections By default, NetworkManager generates a connection profile for each wired ethernet connection it finds. At the point when generating the connection, it does not know whether there will be more Ethernet adapters available. Hence, it calls the first wired connection \" Wired connection 1 \". You can avoid generating this connection, by configuring no",
        "text": "##uid The stable - ll and stable - llt values are also supported. For further information read the description for dhcp - duid in nm - settings ( 5 ) § ipv6 setting. Working with wired connections By default, NetworkManager generates a connection profile for each wired ethernet connection it finds. At the point when generating the connection, it does not know whether there will be more Ethernet adapters available. Hence, it calls the first wired connection \" Wired connection 1 \". You can avoid generating this connection, by configuring no",
        "score": 0.7335036396980286
      },
      {
        "context_type": "resource",
        "children_context_nodes": [
          {
            "$oid": "68639bac01ecb20c9725daf5"
          }
        ],
        "indexed": true,
        "updatedAt": {
          "$date": "2025-07-01T08:26:20.481Z"
        },
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "content": "exec MY _ NAMESPACE killall NetworkManager otherwise NetworkManager will later fail to establish the connection with a device is strictly unmanaged error. Automatically connect to VPN NetworkManager can be set to automatically connect to a VPN when connecting to the internet, on a per network basis. The VPN connection itself can be added in GNOME's NetworkManager front - end, but to make it automatically use the VPN nmcli must be used. Other front - ends might not have this limitation. First, make sure to make the",
        "corresponding_vector_id": "5566e4baf8aa4e639acc30ba9376a06d",
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "_id": {
          "$oid": "68639bac01ecb20c9725daf4"
        },
        "governing_policies": "inherit",
        "parent_context_nodes": [
          {
            "$oid": "68639bac01ecb20c9725daf3"
          }
        ],
        "telemetry_data": {},
        "createdAt": {
          "$date": "2025-07-01T08:26:20.481Z"
        },
        "text": "exec MY _ NAMESPACE killall NetworkManager otherwise NetworkManager will later fail to establish the connection with a device is strictly unmanaged error. Automatically connect to VPN NetworkManager can be set to automatically connect to a VPN when connecting to the internet, on a per network basis. The VPN connection itself can be added in GNOME's NetworkManager front - end, but to make it automatically use the VPN nmcli must be used. Other front - ends might not have this limitation. First, make sure to make the",
        "score": 0.7248390913009644
      },
      {
        "context_type": "resource",
        "parent_context_nodes": [
          {
            "$oid": "68639b7701ecb20c9725da46"
          }
        ],
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "content": "the global defaults. After editing a configuration file, the changes can be applied by running : # nmcli general reload NetworkManager - wait - online Enabling NetworkManager. service also enables NetworkManager - wait - online. service, which is a oneshot system service that waits for the network to be configured. The latter has WantedBy = network - online. target, so it will finish only when network - online. target itself is enabled or pulled in by some other unit. See also systemd # Running services after the network is up. By",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "children_context_nodes": [
          {
            "$oid": "68639b7801ecb20c9725da48"
          }
        ],
        "scopes": [
          "basic.internal"
        ],
        "_id": {
          "$oid": "68639b7801ecb20c9725da47"
        },
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "createdAt": {
          "$date": "2025-07-01T08:25:27.942Z"
        },
        "corresponding_vector_id": "c278c8cebf504468bc7aba442042cd14",
        "telemetry_data": {},
        "updatedAt": {
          "$date": "2025-07-01T08:25:27.942Z"
        },
        "text": "the global defaults. After editing a configuration file, the changes can be applied by running : # nmcli general reload NetworkManager - wait - online Enabling NetworkManager. service also enables NetworkManager - wait - online. service, which is a oneshot system service that waits for the network to be configured. The latter has WantedBy = network - online. target, so it will finish only when network - online. target itself is enabled or pulled in by some other unit. See also systemd # Running services after the network is up. By",
        "score": 0.7243794798851013
      },
      {
        "context_type": "resource",
        "_id": {
          "$oid": "68639b7c01ecb20c9725da55"
        },
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "content": "4 ]. Captive portals For those behind a captive portal, the desktop manager may automatically open a window asking for credentials. If your desktop does not, you can use capnet - assist package ( however, it currently has a broken NetworkManager dispatcher script ). Alternatively, you can create a NetworkManager dispatcher script with the following content : / etc / NetworkManager / dispatcher. d / 90 - open _ captive _ portal #! / bin / sh - e # Script to dispatch NetworkManager events",
        "createdAt": {
          "$date": "2025-07-01T08:25:32.205Z"
        },
        "corresponding_vector_id": "95edc438c6104b7a9759e78aeb5de692",
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "updatedAt": {
          "$date": "2025-07-01T08:25:32.205Z"
        },
        "governing_policies": "inherit",
        "parent_context_nodes": [
          {
            "$oid": "68639b7c01ecb20c9725da54"
          }
        ],
        "telemetry_data": {},
        "children_context_nodes": [
          {
            "$oid": "68639b7c01ecb20c9725da56"
          }
        ],
        "text": "4 ]. Captive portals For those behind a captive portal, the desktop manager may automatically open a window asking for credentials. If your desktop does not, you can use capnet - assist package ( however, it currently has a broken NetworkManager dispatcher script ). Alternatively, you can create a NetworkManager dispatcher script with the following content : / etc / NetworkManager / dispatcher. d / 90 - open _ captive _ portal #! / bin / sh - e # Script to dispatch NetworkManager events",
        "score": 0.7152260541915894
      },
      {
        "context_type": "resource",
        "indexed": true,
        "content": ". The latter has WantedBy = network - online. target, so it will finish only when network - online. target itself is enabled or pulled in by some other unit. See also systemd # Running services after the network is up. By default, NetworkManager - wait - online. service waits for NetworkManager startup to complete, rather than waiting for network connectivity specifically ( see nm - online ( 1 ) ). If NetworkManager - wait - online. service finishes before the network is really up, resulting in failed services on boot, extend the unit to remove the",
        "createdAt": {
          "$date": "2025-07-01T08:25:28.246Z"
        },
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:25:28.246Z"
        },
        "corresponding_vector_id": "0e51044a9c4e490f8de7049f4c837579",
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "_id": {
          "$oid": "68639b7801ecb20c9725da48"
        },
        "children_context_nodes": [
          {
            "$oid": "68639b7801ecb20c9725da49"
          }
        ],
        "telemetry_data": {},
        "parent_context_nodes": [
          {
            "$oid": "68639b7801ecb20c9725da47"
          }
        ],
        "text": ". The latter has WantedBy = network - online. target, so it will finish only when network - online. target itself is enabled or pulled in by some other unit. See also systemd # Running services after the network is up. By default, NetworkManager - wait - online. service waits for NetworkManager startup to complete, rather than waiting for network connectivity specifically ( see nm - online ( 1 ) ). If NetworkManager - wait - online. service finishes before the network is really up, resulting in failed services on boot, extend the unit to remove the",
        "score": 0.699905514717102
      },
      {
        "context_type": "resource",
        "indexed": true,
        "createdAt": {
          "$date": "2025-07-01T08:25:35.549Z"
        },
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "content": "##WE / Elliptic - Curve handshake that many captive - portal hotspots use before presenting a login page. By switching NetworkManager [UNK] s Wi - Fi backend to iwd ( see # Using iwd as the Wi - Fi backend ), which implements the full OWE key exchange in userspace over the existing driver, you can complete the encrypted association, obtain a DHCP lease, and trigger the portal [UNK] PORTAL [UNK] state. Once that is done, any dispatcher script or browser - launcher will re",
        "source": "*",
        "indexable": true,
        "updatedAt": {
          "$date": "2025-07-01T08:25:35.549Z"
        },
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "parent_context_nodes": [
          {
            "$oid": "68639b7f01ecb20c9725da5f"
          }
        ],
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "_id": {
          "$oid": "68639b7f01ecb20c9725da60"
        },
        "telemetry_data": {},
        "corresponding_vector_id": "e07d5b162d204bc88e42866e15b7afc4",
        "children_context_nodes": [
          {
            "$oid": "68639b8001ecb20c9725da61"
          }
        ],
        "text": "##WE / Elliptic - Curve handshake that many captive - portal hotspots use before presenting a login page. By switching NetworkManager [UNK] s Wi - Fi backend to iwd ( see # Using iwd as the Wi - Fi backend ), which implements the full OWE key exchange in userspace over the existing driver, you can complete the encrypted association, obtain a DHCP lease, and trigger the portal [UNK] PORTAL [UNK] state. Once that is done, any dispatcher script or browser - launcher will re",
        "score": 0.6907203793525696
      },
      {
        "context_type": "resource",
        "children_context_nodes": [
          {
            "$oid": "68639bb101ecb20c9725db05"
          }
        ],
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "content": "6 ) No agents were available for this request. This is caused by the GNOME NetworkManager Applet expecting dialog scripts to be at / usr / lib / gnome - shell, when NetworkManager's packages put them in / usr / lib / networkmanager. As a \" temporary \" fix ( this bug has been around for a while now ), make the following symlink ( s ) : For OpenConnect : ln - s / usr / lib / networkmanager / nm - openconnect - auth -",
        "_id": {
          "$oid": "68639bb101ecb20c9725db04"
        },
        "blob": null,
        "parent_context_nodes": [
          {
            "$oid": "68639bb101ecb20c9725db03"
          }
        ],
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "createdAt": {
          "$date": "2025-07-01T08:26:25.352Z"
        },
        "corresponding_vector_id": "4c5e36842cba4525b218a3e679d4481f",
        "telemetry_data": {},
        "updatedAt": {
          "$date": "2025-07-01T08:26:25.352Z"
        },
        "text": "6 ) No agents were available for this request. This is caused by the GNOME NetworkManager Applet expecting dialog scripts to be at / usr / lib / gnome - shell, when NetworkManager's packages put them in / usr / lib / networkmanager. As a \" temporary \" fix ( this bug has been around for a while now ), make the following symlink ( s ) : For OpenConnect : ln - s / usr / lib / networkmanager / nm - openconnect - auth -",
        "score": 0.6871793270111084
      },
      {
        "context_type": "resource",
        "children_context_nodes": [
          {
            "$oid": "68639b9501ecb20c9725daa8"
          }
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:25:57.090Z"
        },
        "indexed": true,
        "content": "nmcli ( nmcli d | grep ethernet ). The Ethernet interfaces start with en or eth, e. g. enp0s5 or eth0. Remember to make the script executable. You can verify that it works by restarting NetworkManager. service, running ip a, and checking that wlp3s0 ( or whatever your Wi - Fi interface is called ) is in state DOWN. If you encounter unexpected behavior, check the journal of NetworkManager - dispatcher. service. / etc / Network",
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "parent_context_nodes": [
          {
            "$oid": "68639b9401ecb20c9725daa6"
          }
        ],
        "_id": {
          "$oid": "68639b9501ecb20c9725daa7"
        },
        "telemetry_data": {},
        "corresponding_vector_id": "08f9017fdd5040a38ecb1caae36205b8",
        "createdAt": {
          "$date": "2025-07-01T08:25:57.090Z"
        },
        "text": "nmcli ( nmcli d | grep ethernet ). The Ethernet interfaces start with en or eth, e. g. enp0s5 or eth0. Remember to make the script executable. You can verify that it works by restarting NetworkManager. service, running ip a, and checking that wlp3s0 ( or whatever your Wi - Fi interface is called ) is in state DOWN. If you encounter unexpected behavior, check the journal of NetworkManager - dispatcher. service. / etc / Network",
        "score": 0.6293706297874451
      },
      {
        "context_type": "resource",
        "corresponding_vector_id": "5cc1f13a0aec40f49cd9f70302e42b87",
        "updatedAt": {
          "$date": "2025-07-01T08:26:10.748Z"
        },
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "content": "##masq and nm - connection - editor packages to be able to actually share the connection. Note that NetworkManager starts its own instance of dnsmasq, independent of dnsmasq. service, as a DHCP server. See # dnsmasq for the caveats. Your internet connected device and the other devices are connected over a suitable Ethernet cable ( this usually means a cross over cable or a switch in between ). Internet sharing is not blocked by a firewall. Steps : Run nm - connection - editor from terminal. Add a new Ethernet connection. Give it some sensible name",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "parent_context_nodes": [
          {
            "$oid": "68639ba201ecb20c9725dad3"
          }
        ],
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "_id": {
          "$oid": "68639ba201ecb20c9725dad4"
        },
        "children_context_nodes": [
          {
            "$oid": "68639ba301ecb20c9725dad5"
          }
        ],
        "telemetry_data": {},
        "createdAt": {
          "$date": "2025-07-01T08:26:10.748Z"
        },
        "text": "##masq and nm - connection - editor packages to be able to actually share the connection. Note that NetworkManager starts its own instance of dnsmasq, independent of dnsmasq. service, as a DHCP server. See # dnsmasq for the caveats. Your internet connected device and the other devices are connected over a suitable Ethernet cable ( this usually means a cross over cable or a switch in between ). Internet sharing is not blocked by a firewall. Steps : Run nm - connection - editor from terminal. Add a new Ethernet connection. Give it some sensible name",
        "score": 0.6216408014297485
      },
      {
        "context_type": "resource",
        "createdAt": {
          "$date": "2025-07-01T08:26:00.726Z"
        },
        "content": "passwd - file in a safe location with the same permissions and ownership as the dispatcher script, containing the following : / path / to / passwd - file vpn. secrets. password : YOUR _ PASSWORD The script must be changed accordingly, so that it gets the password from the file : / etc / NetworkManager / dispatcher. d / vpn - up #! / bin / sh VPN _ NAME = \" name of VPN connection defined in NetworkManager \" ESSID = \" Wi - Fi network ES",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "updatedAt": {
          "$date": "2025-07-01T08:26:00.726Z"
        },
        "source": "*",
        "_id": {
          "$oid": "68639b9801ecb20c9725dab3"
        },
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "parent_context_nodes": [
          {
            "$oid": "68639b9801ecb20c9725dab2"
          }
        ],
        "corresponding_vector_id": "1949cf6f261e465d880137c8503fe037",
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "telemetry_data": {},
        "children_context_nodes": [
          {
            "$oid": "68639b9901ecb20c9725dab4"
          }
        ],
        "text": "passwd - file in a safe location with the same permissions and ownership as the dispatcher script, containing the following : / path / to / passwd - file vpn. secrets. password : YOUR _ PASSWORD The script must be changed accordingly, so that it gets the password from the file : / etc / NetworkManager / dispatcher. d / vpn - up #! / bin / sh VPN _ NAME = \" name of VPN connection defined in NetworkManager \" ESSID = \" Wi - Fi network ES",
        "score": 0.6210666298866272
      },
      {
        "context_type": "resource",
        "updatedAt": {
          "$date": "2025-07-01T08:26:34.499Z"
        },
        "indexed": true,
        "parent_context_nodes": [
          {
            "$oid": "68639bba01ecb20c9725db21"
          }
        ],
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "_id": {
          "$oid": "68639bba01ecb20c9725db22"
        },
        "children_context_nodes": [
          {
            "$oid": "68639bba01ecb20c9725db23"
          }
        ],
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "corresponding_vector_id": "0eb651b0f4cc4220b97f3fa67722c847",
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "content": "integrated within the GNOME - Shell. If libnma is required but not installed a message will be printed to the system log : NetworkManager [ 642 ] : < warn > [... ] vpn [... \" name _ of _ vpn _ profile VPN \" ] : secrets : failed to request VPN secrets # 3 : No agents were available for this request. OpenVPN connections fail with OpenSSL \" ca md too weak \" error Since openssl was updated to version 3, certificates generated with legacy cryptographic algorithms are",
        "telemetry_data": {},
        "createdAt": {
          "$date": "2025-07-01T08:26:34.499Z"
        },
        "text": "integrated within the GNOME - Shell. If libnma is required but not installed a message will be printed to the system log : NetworkManager [ 642 ] : < warn > [... ] vpn [... \" name _ of _ vpn _ profile VPN \" ] : secrets : failed to request VPN secrets # 3 : No agents were available for this request. OpenVPN connections fail with OpenSSL \" ca md too weak \" error Since openssl was updated to version 3, certificates generated with legacy cryptographic algorithms are",
        "score": 0.585406482219696
      },
      {
        "context_type": "resource",
        "content": "possible to connect to a new encrypted Wi - Fi network by clicking on the item list because no password input dialogue window will pop out. journal will show no secrets : No agents were available for this request. Appindicator As of version 1. 18. 0 Appindicator support is available in the official network - manager - applet package. To use nm - applet in an Appindicator environment start the applet with the following command : $ nm - applet - - indicator networkmanager - dmenu Alternatively there is networkmanager - dmenu -",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "createdAt": {
          "$date": "2025-07-01T08:25:26.423Z"
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "parent_context_nodes": [
          {
            "$oid": "68639b7601ecb20c9725da41"
          }
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:25:26.423Z"
        },
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "children_context_nodes": [
          {
            "$oid": "68639b7601ecb20c9725da43"
          }
        ],
        "corresponding_vector_id": "7a27d40981574eed894a10558771d2a0",
        "telemetry_data": {},
        "_id": {
          "$oid": "68639b7601ecb20c9725da42"
        },
        "text": "possible to connect to a new encrypted Wi - Fi network by clicking on the item list because no password input dialogue window will pop out. journal will show no secrets : No agents were available for this request. Appindicator As of version 1. 18. 0 Appindicator support is available in the official network - manager - applet package. To use nm - applet in an Appindicator environment start the applet with the following command : $ nm - applet - - indicator networkmanager - dmenu Alternatively there is networkmanager - dmenu -",
        "score": 0.49925509095191956
      },
      {
        "context_type": "resource",
        "createdAt": {
          "$date": "2025-07-01T08:25:29.759Z"
        },
        "children_context_nodes": [
          {
            "$oid": "68639b7a01ecb20c9725da4e"
          }
        ],
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "updatedAt": {
          "$date": "2025-07-01T08:25:29.759Z"
        },
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "content": "Note that your user account may be granted other permissions as well, such as the ability to use sudo without entering the root password. Add yourself to the network group and create / etc / polkit - 1 / rules. d / 50 - org. freedesktop. NetworkManager. rules with the following content : polkit. addRule ( function ( action, subject ) { if ( action. id. indexOf ( \" org. freedesktop. NetworkManager. \" ) = = 0 & & subject. isInGroup ( \" network \"",
        "blob": null,
        "_id": {
          "$oid": "68639b7901ecb20c9725da4d"
        },
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "parent_context_nodes": [
          {
            "$oid": "68639b7901ecb20c9725da4c"
          }
        ],
        "telemetry_data": {},
        "corresponding_vector_id": "33c692bd759140ce81f15faa868fcd65",
        "text": "Note that your user account may be granted other permissions as well, such as the ability to use sudo without entering the root password. Add yourself to the network group and create / etc / polkit - 1 / rules. d / 50 - org. freedesktop. NetworkManager. rules with the following content : polkit. addRule ( function ( action, subject ) { if ( action. id. indexOf ( \" org. freedesktop. NetworkManager. \" ) = = 0 & & subject. isInGroup ( \" network \"",
        "score": 0.44750508666038513
      },
      {
        "context_type": "resource",
        "createdAt": {
          "$date": "2025-07-01T08:25:31.296Z"
        },
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "updatedAt": {
          "$date": "2025-07-01T08:25:31.296Z"
        },
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "corresponding_vector_id": "1437d2218130427798312417f4bb2e2c",
        "blob": null,
        "override_policy": false,
        "children_context_nodes": [
          {
            "$oid": "68639b7b01ecb20c9725da53"
          }
        ],
        "organization_id": null,
        "governing_policies": "inherit",
        "content": "##ver or to disable connectivity checking, create / etc / NetworkManager / conf. d / 20 - connectivity. conf, see NetworkManager. conf ( 5 ) § CONNECTIVITY SECTION. Below is an example of using GNOME servers ( it does not require the use of GNOME ) : / etc / NetworkManager / conf. d / 20 - connectivity. conf [ connectivity ] uri = http : / / nmcheck. gnome. org / check _ network _ status. txt",
        "parent_context_nodes": [
          {
            "$oid": "68639b7b01ecb20c9725da51"
          }
        ],
        "_id": {
          "$oid": "68639b7b01ecb20c9725da52"
        },
        "telemetry_data": {},
        "text": "##ver or to disable connectivity checking, create / etc / NetworkManager / conf. d / 20 - connectivity. conf, see NetworkManager. conf ( 5 ) § CONNECTIVITY SECTION. Below is an example of using GNOME servers ( it does not require the use of GNOME ) : / etc / NetworkManager / conf. d / 20 - connectivity. conf [ connectivity ] uri = http : / / nmcheck. gnome. org / check _ network _ status. txt",
        "score": 0.40234649181365967
      },
      {
        "context_type": "resource",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "createdAt": {
          "$date": "2025-07-01T08:26:16.832Z"
        },
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "updatedAt": {
          "$date": "2025-07-01T08:26:16.832Z"
        },
        "override_policy": false,
        "organization_id": null,
        "children_context_nodes": [
          {
            "$oid": "68639ba901ecb20c9725dae9"
          }
        ],
        "governing_policies": "inherit",
        "corresponding_vector_id": "c991036ca3314972869657a96a6597b1",
        "parent_context_nodes": [
          {
            "$oid": "68639ba801ecb20c9725dae7"
          }
        ],
        "content": "does not like random MAC addresses ), edit the connection to set 802 - 11 - wireless. cloned - mac - address to one of the modes ( e. g. stable or random ). See the following GNOME blog post for more details. Enable IPv6 Privacy Extensions See IPv6 # NetworkManager. Configure a unique DUID per connection The DHCPv6 Unique Identifier ( DUID ) is a value used by the DHCPv6 client to identify itself to DHCPv6 servers. NetworkManager supports",
        "_id": {
          "$oid": "68639ba901ecb20c9725dae8"
        },
        "telemetry_data": {},
        "text": "does not like random MAC addresses ), edit the connection to set 802 - 11 - wireless. cloned - mac - address to one of the modes ( e. g. stable or random ). See the following GNOME blog post for more details. Enable IPv6 Privacy Extensions See IPv6 # NetworkManager. Configure a unique DUID per connection The DHCPv6 Unique Identifier ( DUID ) is a value used by the DHCPv6 client to identify itself to DHCPv6 servers. NetworkManager supports",
        "score": 0.40100154280662537
      },
      {
        "context_type": "resource",
        "parent_context_nodes": [
          {
            "$oid": "68639b8201ecb20c9725da69"
          }
        ],
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "createdAt": {
          "$date": "2025-07-01T08:25:38.570Z"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "corresponding_vector_id": "be27be7fd3c74428ae06ae7eea3351ea",
        "_id": {
          "$oid": "68639b8201ecb20c9725da6a"
        },
        "updatedAt": {
          "$date": "2025-07-01T08:25:38.570Z"
        },
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "content": "found in / run / NetworkManager / no - stub - resolv. conf. You can verify dnsmasq is being used by doing the same DNS lookup twice with drill example. com and verifying the server and query times. Note : You do not need to start dnsmasq. service or edit / etc / dnsmasq. conf. NetworkManager will start dnsmasq without using the systemd service and without reading the dnsmasq's default configuration file ( s ). The dnsmasq instance started by NetworkM",
        "telemetry_data": {},
        "children_context_nodes": [
          {
            "$oid": "68639b8301ecb20c9725da6b"
          }
        ],
        "text": "found in / run / NetworkManager / no - stub - resolv. conf. You can verify dnsmasq is being used by doing the same DNS lookup twice with drill example. com and verifying the server and query times. Note : You do not need to start dnsmasq. service or edit / etc / dnsmasq. conf. NetworkManager will start dnsmasq without using the systemd service and without reading the dnsmasq's default configuration file ( s ). The dnsmasq instance started by NetworkM",
        "score": 0.36917880177497864
      },
      {
        "context_type": "resource",
        "indexed": true,
        "updatedAt": {
          "$date": "2025-07-01T08:25:23.687Z"
        },
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "corresponding_vector_id": "c77d86be03e44aa1872ee7287c97aad7",
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "content": "##i connection modify'Wired connection 2'setting. property \" \" Connection file In / etc / NetworkManager / system - connections /, modify the corresponding Wired connection 2. nmconnection file. Do not forget to reload the configuration file with nmcli connection reload. nmtui NetworkManager ships a text user interface ( TUI ) for managing connections, the system hostname and radio switches. It can be launched by running nmtui. Front - ends To provide integration with a desktop environment, most users will want to install an applet. This",
        "override_policy": false,
        "organization_id": null,
        "_id": {
          "$oid": "68639b7301ecb20c9725da39"
        },
        "governing_policies": "inherit",
        "parent_context_nodes": [
          {
            "$oid": "68639b7301ecb20c9725da38"
          }
        ],
        "children_context_nodes": [
          {
            "$oid": "68639b7401ecb20c9725da3a"
          }
        ],
        "telemetry_data": {},
        "createdAt": {
          "$date": "2025-07-01T08:25:23.687Z"
        },
        "text": "##i connection modify'Wired connection 2'setting. property \" \" Connection file In / etc / NetworkManager / system - connections /, modify the corresponding Wired connection 2. nmconnection file. Do not forget to reload the configuration file with nmcli connection reload. nmtui NetworkManager ships a text user interface ( TUI ) for managing connections, the system hostname and radio switches. It can be launched by running nmtui. Front - ends To provide integration with a desktop environment, most users will want to install an applet. This",
        "score": 0.35399726033210754
      },
      {
        "context_type": "resource",
        "indexed": true,
        "content": "being disabled. This script will not work if multiple devices or connections provide IPv6 connectivity, but could be adapted to iterate over multiple devices. Note that any change to the connection ( using nmcli ( 1 ) or a desktop environment ) will reapply the entire connection to the device and re - enable IPv6 ( if it is enabled in the connection ). / etc / NetworkManager / dispatcher. d / 10 - vpn - ipv6 #! / bin / sh case \" $ 2 \" in vpn - up ) nmcli device",
        "corresponding_vector_id": "34ad81c7afc04312bbe652be5f406f33",
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "createdAt": {
          "$date": "2025-07-01T08:26:03.152Z"
        },
        "indexable": true,
        "children_context_nodes": [
          {
            "$oid": "68639b9b01ecb20c9725dabc"
          }
        ],
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:26:03.152Z"
        },
        "blob": null,
        "_id": {
          "$oid": "68639b9b01ecb20c9725dabb"
        },
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "parent_context_nodes": [
          {
            "$oid": "68639b9b01ecb20c9725daba"
          }
        ],
        "telemetry_data": {},
        "text": "being disabled. This script will not work if multiple devices or connections provide IPv6 connectivity, but could be adapted to iterate over multiple devices. Note that any change to the connection ( using nmcli ( 1 ) or a desktop environment ) will reapply the entire connection to the device and re - enable IPv6 ( if it is enabled in the connection ). / etc / NetworkManager / dispatcher. d / 10 - vpn - ipv6 #! / bin / sh case \" $ 2 \" in vpn - up ) nmcli device",
        "score": 0.34269389510154724
      },
      {
        "context_type": "resource",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "createdAt": {
          "$date": "2025-07-01T08:26:39.685Z"
        },
        "corresponding_vector_id": "06f71e44f9dc43d5864b44b42a41f07b",
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "parent_context_nodes": [
          {
            "$oid": "68639bbf01ecb20c9725db32"
          }
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:26:39.685Z"
        },
        "content": ", n is the index of the network authentication bit octet, read from right to left. Flipping the fifth bit enables TLS 1. 0 [ log ( 2 ) 32 ] and flipping the sixth bit enables TLS 1. 1 [ log ( 2 ) 64 ]. The change should instantly be reflected in / etc / NetworkManager / system - connections / Example Wi - Fi. nmconnection. Finally, restart the NetworkManager. service to have the new OpenSSL configuration take effect. See also NetworkManager",
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "_id": {
          "$oid": "68639bbf01ecb20c9725db33"
        },
        "governing_policies": "inherit",
        "telemetry_data": {},
        "children_context_nodes": [
          {
            "$oid": "68639bc001ecb20c9725db34"
          }
        ],
        "text": ", n is the index of the network authentication bit octet, read from right to left. Flipping the fifth bit enables TLS 1. 0 [ log ( 2 ) 32 ] and flipping the sixth bit enables TLS 1. 1 [ log ( 2 ) 64 ]. The change should instantly be reflected in / etc / NetworkManager / system - connections / Example Wi - Fi. nmconnection. Finally, restart the NetworkManager. service to have the new OpenSSL configuration take effect. See also NetworkManager",
        "score": 0.33070001006126404
      },
      {
        "context_type": "resource",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "content": "available for this request. It is either because the password is empty or you have to set up PolicyKit permissions. OpenVPN connections fail with \" secrets : failed to request VPN secrets \" warn The package networkmanager - openvpn requires libnma - gtk4 and optionally libnma ( Gtk3 ) when integrated within the GNOME - Shell. If libnma is required but not installed a message will be printed to the system log : NetworkManager [ 642 ] : < warn > [... ] vpn [..",
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "corresponding_vector_id": "47af8d0719294e4dafbbf12396998440",
        "_id": {
          "$oid": "68639bba01ecb20c9725db21"
        },
        "blob": null,
        "createdAt": {
          "$date": "2025-07-01T08:26:34.184Z"
        },
        "override_policy": false,
        "organization_id": null,
        "parent_context_nodes": [
          {
            "$oid": "68639bba01ecb20c9725db20"
          }
        ],
        "governing_policies": "inherit",
        "updatedAt": {
          "$date": "2025-07-01T08:26:34.184Z"
        },
        "telemetry_data": {},
        "children_context_nodes": [
          {
            "$oid": "68639bba01ecb20c9725db22"
          }
        ],
        "text": "available for this request. It is either because the password is empty or you have to set up PolicyKit permissions. OpenVPN connections fail with \" secrets : failed to request VPN secrets \" warn The package networkmanager - openvpn requires libnma - gtk4 and optionally libnma ( Gtk3 ) when integrated within the GNOME - Shell. If libnma is required but not installed a message will be printed to the system log : NetworkManager [ 642 ] : < warn > [... ] vpn [..",
        "score": 0.32625311613082886
      },
      {
        "context_type": "resource",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "createdAt": {
          "$date": "2025-07-01T08:25:50.111Z"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "updatedAt": {
          "$date": "2025-07-01T08:25:50.111Z"
        },
        "_id": {
          "$oid": "68639b8e01ecb20c9725da90"
        },
        "content": "the above is working, then this section is not relevant. However, there is a general problem related to running dispatcher scripts which take longer to be executed. Initially an internal timeout of three seconds only was used. If the called script did not complete in time, it was killed. Later the timeout was extended to about 20 seconds ( see the Bugtracker for more information ). If the timeout still creates the problem, a work around may be to use a drop - in file for the NetworkManager - dispatcher. service to remain active after exit : / etc / systemd",
        "blob": null,
        "override_policy": false,
        "parent_context_nodes": [
          {
            "$oid": "68639b8d01ecb20c9725da8f"
          }
        ],
        "organization_id": null,
        "governing_policies": "inherit",
        "corresponding_vector_id": "1b60a662a42143c5801b1b362fa3fd77",
        "telemetry_data": {},
        "children_context_nodes": [
          {
            "$oid": "68639b8e01ecb20c9725da91"
          }
        ],
        "text": "the above is working, then this section is not relevant. However, there is a general problem related to running dispatcher scripts which take longer to be executed. Initially an internal timeout of three seconds only was used. If the called script did not complete in time, it was killed. Later the timeout was extended to about 20 seconds ( see the Bugtracker for more information ). If the timeout still creates the problem, a work around may be to use a drop - in file for the NetworkManager - dispatcher. service to remain active after exit : / etc / systemd",
        "score": 0.32198917865753174
      },
      {
        "context_type": "resource",
        "parent_context_nodes": [
          {
            "$oid": "68639ba101ecb20c9725dad0"
          }
        ],
        "content": "AP mode for details. Install the dnsmasq package to be able to actually share the connection. Note that NetworkManager starts its own instance of dnsmasq, independent of dnsmasq. service, as a DHCP server. See # dnsmasq for the caveats. Create the shared connection : Click on applet and choose Create new wireless network. Follow wizard ( choose WPA2 or higher, be sure to use at least 8 character long password, lower lengths will fail ). Choose either Hotspot or Ad - hoc as Wi -",
        "updatedAt": {
          "$date": "2025-07-01T08:26:09.831Z"
        },
        "indexed": true,
        "children_context_nodes": [
          {
            "$oid": "68639ba201ecb20c9725dad2"
          }
        ],
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "corresponding_vector_id": "e060254a49214d85b99a3d3cc18e39fb",
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "blob": null,
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "telemetry_data": {},
        "createdAt": {
          "$date": "2025-07-01T08:26:09.831Z"
        },
        "_id": {
          "$oid": "68639ba201ecb20c9725dad1"
        },
        "text": "AP mode for details. Install the dnsmasq package to be able to actually share the connection. Note that NetworkManager starts its own instance of dnsmasq, independent of dnsmasq. service, as a DHCP server. See # dnsmasq for the caveats. Create the shared connection : Click on applet and choose Create new wireless network. Follow wizard ( choose WPA2 or higher, be sure to use at least 8 character long password, lower lengths will fail ). Choose either Hotspot or Ad - hoc as Wi -",
        "score": 0.31748703122138977
      },
      {
        "context_type": "resource",
        "corresponding_vector_id": "9774a7d0bf91433f919328aa5a00bc9d",
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "createdAt": {
          "$date": "2025-07-01T08:25:27.333Z"
        },
        "blob": null,
        "content": "s switchboard offers a desktop environment - agnostic way to configure NetworkManager when combined with switchboard - plug - network and nm - connection - editor. It can be ran with the following command : $ io. elementary. settings Configuration NetworkManager will require some additional steps to be able run properly. Make sure you have configured / etc / hosts as described in Network configuration # Set the hostname section. NetworkManager has a global configuration file at / etc / NetworkManager / NetworkManager. conf. Additional configuration files can be",
        "override_policy": false,
        "updatedAt": {
          "$date": "2025-07-01T08:25:27.333Z"
        },
        "organization_id": null,
        "governing_policies": "inherit",
        "children_context_nodes": [
          {
            "$oid": "68639b7701ecb20c9725da46"
          }
        ],
        "parent_context_nodes": [
          {
            "$oid": "68639b7701ecb20c9725da44"
          }
        ],
        "_id": {
          "$oid": "68639b7701ecb20c9725da45"
        },
        "telemetry_data": {},
        "text": "s switchboard offers a desktop environment - agnostic way to configure NetworkManager when combined with switchboard - plug - network and nm - connection - editor. It can be ran with the following command : $ io. elementary. settings Configuration NetworkManager will require some additional steps to be able run properly. Make sure you have configured / etc / hosts as described in Network configuration # Set the hostname section. NetworkManager has a global configuration file at / etc / NetworkManager / NetworkManager. conf. Additional configuration files can be",
        "score": 0.3135247826576233
      },
      {
        "context_type": "resource",
        "updatedAt": {
          "$date": "2025-07-01T08:26:11.654Z"
        },
        "indexed": true,
        "metadata": {
          "file_name": "NetworkManager-20250701-135512.txt",
          "size": 71485,
          "last_modified_at": "2025-07-01T13:55:12+05:30",
          "doc_type": "text/plain",
          "modalities": [
            "image",
            "text"
          ]
        },
        "_id": {
          "$oid": "68639ba301ecb20c9725dad7"
        },
        "user_id": {
          "$oid": "6855ad9afb4e01db11d9a1f5"
        },
        "source": "*",
        "corresponding_vector_id": "2034dea43b734e4dbad76253ea13dd5a",
        "indexable": true,
        "tags": [
          "default",
          "sample"
        ],
        "scopes": [
          "basic.internal"
        ],
        "parent_context_nodes": [
          {
            "$oid": "68639ba301ecb20c9725dad6"
          }
        ],
        "blob": null,
        "content": "##plish this, add an if test for networking that queries NetworkManager's nm - tool and checks the state of networking. The test shown here succeeds if any interface is up, and fails if they are all down. This is convenient for laptops that might be hardwired, might be on wireless, or might be off the network. if [ $ ( nm - tool | grep State | cut - f2 - d'' ) = = \" connected \" ] ; then # Whatever you want to do if the network is online else # What",
        "override_policy": false,
        "organization_id": null,
        "governing_policies": "inherit",
        "children_context_nodes": [
          {
            "$oid": "68639ba401ecb20c9725dad8"
          }
        ],
        "telemetry_data": {},
        "createdAt": {
          "$date": "2025-07-01T08:26:11.654Z"
        },
        "text": "##plish this, add an if test for networking that queries NetworkManager's nm - tool and checks the state of networking. The test shown here succeeds if any interface is up, and fails if they are all down. This is convenient for laptops that might be hardwired, might be on wireless, or might be off the network. if [ $ ( nm - tool | grep State | cut - f2 - d'' ) = = \" connected \" ] ; then # Whatever you want to do if the network is online else # What",
        "score": 0.3128986060619354
      }
    ]
  }
}
